<template>
  <div>
    <div class="title">下沉督察信息</div>
    <div class="clue-info">
      <div class="clue-item">
        <div class="clue-item-quare">
          <span class="clue-item-label">
            <i class="clue-import">*</i>督察信息：
          </span>
          <span class="clue-item-input">{{teamInfo}}</span>
        </div>
      </div>
      <div class="clue-item">
        <div class="clue-item-quare">
          <span class="clue-item-label" style="margin:0">
            <i class="clue-import">*</i>下沉督察组：
          </span>
        </div>
      </div>
      <div class="clue-item">
        <div class="clue-item-quare clue-item-inspect">
          <span class="clue-item-label">
            <i class="clue-import">*</i>下沉组名称：
          </span>
          <span class="clue-item-input">{{manageInfo.teamName}}</span>
        </div>
        <div class="clue-item-quare clue-item-inspect">
          <span class="clue-item-label">
            <i class="clue-import">*</i>日志时间：
          </span>
          <span class="clue-item-input">{{manageInfo.sinkDate}}</span>
        </div>
      </div>
      <div class="clue-item">
        <div class="clue-item-quare clue-item-inspect">
          <span class="clue-item-label">
            <i class="clue-import">*</i>下沉人员：
          </span>
          <span class="clue-item-input">{{manageInfo.sinkPerson}}</span>
        </div>
      </div>

      <div class="clue-item">
        <div class="clue-item-quare">
          <span class="clue-item-label">
            <i class="clue-import">*</i>下沉日志
          </span>
        </div>
      </div>
      <div v-for="(item,index) in addressArry" :key="index">
        <div class="clue-item">
          <div class="clue-item-quare clue-item-inspect">
            <span class="clue-item-label">
              <i class="clue-import">*</i>下沉地点：
            </span>
            <span class="clue-item-file">{{item.address}}</span>
          </div>
        </div>
        <div class="clue-item">
          <div class="clue-item-quare clue-item-inspect">
            <span class="clue-item-label">
              <i class="clue-import">*</i>其他相关线索：
            </span>
            <div class="clue-item-file">
              <span
                class="clue-item-file accounChunk"
                v-for="itemb in item.oldMainList"
                :key="itemb.clueId"
              >{{itemb.clueName}}</span>
              <span
                class="clue-item-file accounChunk"
                v-for="itemc in item.newMainList"
                :key="itemc.clueId"
              >{{itemc.clueName}}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { threadTeamInfo, threadByAddress } from "@/api/InspectorClues";
export default {
  props: {
    tailId: {
      type: String
    },
    teamId: {
      type: String
    }
  },
  data() {
    return {
      teamInfo: undefined,
      manageInfo: {
        teamName: undefined,
        sinkDate: undefined,
        sinkPerson: undefined
      },
      addressArry: undefined
    };
  },
  methods: {
    async getTeamInfo() {
      const reponse = await threadTeamInfo({ id: this.teamId });
      const subject = reponse.data;
      this.teamInfo =
        subject.superviseName +
        subject.roundName +
        subject.batchName +
        subject.name;
    },
    async getInfo() {
      const reponse = await threadByAddress({ id: this.tailId });
      console.log(reponse);
      const subject = reponse.data;
      this.manageInfo.teamName = subject.teamName;
      this.manageInfo.sinkDate = subject.sinkDate;
      this.manageInfo.sinkPerson = subject.sinkPerson;
      if (subject.addressList) {
        const addressArry = [];
        const oldMainListArry = [];
        const newMainListtArry = [];
        for (const item in subject.addressList) {
          const addressSubject = subject.addressList[item];
          const temp = {
            address:
              addressSubject.city +
              addressSubject.county +
              addressSubject.address,
            oldMainList: undefined,
            newMainList: undefined
          };
          if (addressSubject.oldMainList) {
            for (const itemb in addressSubject.oldMainList) {
              const oldMainListSubject = addressSubject.oldMainList[itemb];
              const tempb = {
                clueName: oldMainListSubject.clueName,
                clueId: oldMainListSubject.clueId
              };
              oldMainListArry.push(tempb);
            }
          }
          if (addressSubject.newMainList) {
            for (const itemb in addressSubject.newMainList) {
              const newMainListSubject = addressSubject.newMainList[itemb];
              const tempb = {
                clueName: newMainListSubject.clueName,
                clueId: newMainListSubject.clueId
              };
              newMainListtArry.push(tempb);
            }
          }
          temp.oldMainList = oldMainListArry;
          temp.newMainList = newMainListtArry;
          addressArry.push(temp);
        }
        this.addressArry = addressArry;
        console.log(addressArry);
      }
    }
  }
};
</script>

<style lang="scss" scoped>
.title {
  height: 20px;
  border-left: 3px solid #2196f3;
  padding-left: 10px;
  font-size: 14px;
  font-weight: 500;
}
.clue-info {
  width: 100%;
  .clue-item {
    display: flex;
    margin-top: 16px;
    &.two-clue-item {
      .clue-item-quare {
        &:first-child {
          margin-right: 16px;
        }
      }
    }
    .clue-item-quare {
      flex: 1;
      display: flex;
      flex-direction: column;
      &.clue-item-inspect {
        flex-direction: row;
        align-items: center;

        .clue-item-label {
          width: 126px;
          text-align: right;
          margin-bottom: 0;
        }
      }
      .clue-item-file {
        padding-left: 10px;
        display: block;
      }
      .clue-item-label {
        font-size: 14px;
        color: #333;
        margin-bottom: 10px;
        display: block;
        .clue-import {
          display: inline-block;
          margin-right: 4px;
          color: #f56c6c;
        }
      }
      .clue-item-input {
        width: 100%;
        min-height: 32px;
        line-height: 32px;
        font-size: 14px;
        border: 1px solid #eee;
        border-radius: 4px;
        padding-left: 10px;
        box-sizing: border-box;
        overflow: hidden;
        flex: 1;
      }
      .clue-item-select {
        display: flex;
        .clue-item-select-city {
          width: 11%;
          height: 32px;
          line-height: 32px;
          font-size: 14px;
          border: 1px solid #eee;
          margin-right: 16px;
          border-radius: 4px;
          padding-left: 10px;
          overflow: hidden;
        }
        .clue-item-select-address {
          flex: 1;
          height: 32px;
          line-height: 32px;
          font-size: 14px;
          border: 1px solid #eee;
          border-radius: 4px;
          padding-left: 10px;
          overflow: hidden;
        }
      }
    }
  }
}
.clue-question {
  display: flex;
  flex-direction: column;
  .question-item {
    margin-bottom: 10px;
    display: flex;
    flex-direction: column;
    .question-top {
      display: flex;
      align-items: center;
      .question-label {
        width: 100px;
        font-size: 14px;
        color: #333;
        text-align: right;
        font-weight: normal;
      }
    }
    .question-bottom {
      margin-top: 10px;
      display: flex;
      align-items: center;
      .question-label {
        width: 100px;
        font-size: 14px;
        color: #333;
        text-align: right;
        font-weight: normal;
      }
    }
  }
}
</style>