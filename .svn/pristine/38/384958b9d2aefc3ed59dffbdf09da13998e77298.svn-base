<template>
  <div class="information-inner information-change">
    <h1 class="information-title active">整改任务</h1>
    <div class="tab-list-content">
      <div class="box-body" v-show="showSearch">
        <el-form :model="queryParams" label-width="120px">
          <el-row>
            <el-col :span="8">
              <el-form-item label="督察级别 ：">
                <el-select
                  placeholder="请选择督察级别"
                  @change="changeSuperviseLevel(1)"
                  v-model="queryParams.levelType"
                >
                  <el-option
                    v-for="item in superviseLevelArry"
                    :key="item.id"
                    :label="item.name"
                    :value="item.value"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="督察类型 ：">
                <el-select
                  v-model="queryParams.inspectType"
                  placeholder="请选择督察类型"
                  @change="changeinspectType(1)"
                >
                  <el-option
                    v-for="item in inspectTypeArry"
                    :key="item.id"
                    :label="item.name"
                    :value="item.value"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="督察轮次：">
                <el-select
                  v-model="queryParams.roundId"
                  placeholder="请选择督察轮次"
                  @change="changeSuperviseRound(1)"
                >
                  <el-option
                    v-for="item in superviseRoundArry"
                    :key="item.id"
                    :label="item.batchName"
                    :value="item.batchId"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="8">
              <el-form-item label="督察批次：">
                <el-select
                  v-model="queryParams.batchId"
                  placeholder="请选择督察批次"
                  @change="changeSuperviseBatch(1)"
                >
                  <el-option
                    v-for="item in superviseBatchArry"
                    :key="item.id"
                    :label="item.batchName"
                    :value="item.batchId"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="方案名称：">
                <el-select
                  v-model="queryParams.planId"
                  placeholder="请选择方案名称"
                >
                  <el-option
                    v-for="item in superviseNameArry"
                    :key="item.id"
                    :label="item.planName"
                    :value="item.id"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item class="pull-right">
                <el-button type="primary" @click="onQuery">查询</el-button>
                <el-button type="primary" @click="onClear">清空</el-button>
              </el-form-item>
            </el-col>
          </el-row>
        </el-form>
      </div>
      <el-row :gutter="10" class="mb8">
        <el-button
          size="small"
          @click="handleNewly"
          type="primary"
          v-if="buttonAuthority"
          >新增</el-button
        >
        <right-toolbar
          :showSearch.sync="showSearch"
          @queryTable="getChangeTaskList"
        ></right-toolbar>
      </el-row>
      <el-table v-loading="loading" :data="List" border :stripe="true">
        <el-table-column width="50" label="序号">
          <template scope="scope">
            <span>{{
              (queryParams.pageNo - 1) * queryParams.pageSize + scope.$index + 1
            }}</span>
          </template></el-table-column
        >
        <el-table-column prop="title" label="督察类型" min-width="160px">
          <template v-slot="scope">
            <span>{{ scope.row.inspectTypeName }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="title" label="督察轮次、批次" min-width="160px">
          <template v-slot="scope">
            <span>{{ scope.row.roundName }}、{{ scope.row.batchName }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="title" label="地区" min-width="160px">
          <template v-slot="scope">
            <span>{{ scope.row.writeCity }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="title" label="方案名称" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.planName }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="title" label="整改任务内容" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.rectifyContent }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="reportDate" label="整改目标" width="160px"
          ><template v-slot="scope">
            <span>{{ scope.row.rectifyTarget }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="reportDate" label="完成情况" width="160px"
          ><template v-slot="scope">
            <span>{{ scope.row.finishSituationName }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="reportDate" label="完成时限" width="160px"
          ><template v-slot="scope">
            <span>{{ scope.row.deadline }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="reportDate" label="是否重点" width="120px"
          ><template v-slot="scope">
            <span>{{ scope.row.isKeyTaskName }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="reportDate" label="大概位置" width="160px"
          ><template v-slot="scope">
            <span
              >{{ scope.row.taskCityName }}{{ scope.row.taskCountyName
              }}{{ scope.row.taskAddress }}</span
            >
          </template>
        </el-table-column>
        <el-table-column label="操作" width="320" v-if="buttonAuthority">
          <template v-slot="scope">
            <el-button size="mini" @click="handleSee(scope.row, 'view')"
              >查看</el-button
            >
            <!-- <el-button size="mini" type="primary" @click="handleEdit(scope.row)"
              >修改</el-button
            > -->
            <el-button
              size="mini"
              type="primary"
              @click="handleSee(scope.row, 'report')"
              >进度填报</el-button
            >
            <el-button
              size="mini"
              type="primary"
              @click="handleSee(scope.row, 'check')"
              >现场核实</el-button
            >
          </template>
        </el-table-column>
        <el-table-column label="操作" width="100" v-else>
          <template v-slot="scope">
            <el-button size="mini" @click="handleSee(scope.row, 'view')"
              >查看</el-button
            >
          </template>
        </el-table-column>
      </el-table>
      <pagination
        v-show="total > 0"
        :total="total"
        :pageNo.sync="queryParams.pageNo"
        :limit.sync="queryParams.pageSize"
        @pagination="getChangeTaskList"
      />
    </div>
    <!-- add、edit -->
    <el-dialog
      :title="dialogTitle"
      :visible.sync="open"
      width="80%"
      :before-close="handleDialogClose"
      append-to-body
    >
      <el-form
        ref="dialogForm1"
        :model="dialogParams"
        :rules="dialogRules"
        label-width="80px"
        class="dialogForm twoLayoutForm"
      >
        <el-divider content-position="left">方案信息</el-divider>
        <section style="padding-top: 10px">
          <el-row :gutter="24">
            <el-col :span="12">
              <el-form-item label="督察级别：" prop="levelType">
                <el-select
                  placeholder="请选择督察级别"
                  @change="changeSuperviseLevel(2)"
                  v-model="dialogParams.levelType"
                >
                  <el-option
                    v-for="item in superviseLevelArry"
                    :key="item.id"
                    :label="item.name"
                    :value="item.value"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="督察类型：" prop="inspectType">
                <el-select
                  v-model="dialogParams.inspectType"
                  placeholder="请选择督察类型"
                  @change="changeinspectType(2)"
                >
                  <el-option
                    v-for="item in inspectTypeArry2"
                    :key="item.id"
                    :label="item.name"
                    :value="item.value"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="12">
              <el-form-item label="督察轮次：" prop="roundId">
                <el-select
                  v-model="dialogParams.roundId"
                  placeholder="请选择督察轮次"
                  @change="changeSuperviseRound(2)"
                >
                  <el-option
                    v-for="item in superviseRoundArry2"
                    :key="item.id"
                    :label="item.batchName"
                    :value="item.batchId"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="督察批次：" prop="batchId">
                <el-select
                  v-model="dialogParams.batchId"
                  placeholder="请选择督察批次"
                  @change="changeSuperviseBatch(2)"
                >
                  <el-option
                    v-for="item in superviseBatchArry2"
                    :key="item.id"
                    :label="item.batchName"
                    :value="item.batchId"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="12">
              <el-form-item label="方案名称：" prop="planId">
                <el-select
                  v-model="dialogParams.planId"
                  placeholder="请选择方案名称"
                >
                  <el-option
                    v-for="item in superviseNameArry2"
                    :key="item.id"
                    :label="item.planName"
                    :value="item.id"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="督察地区：" prop="city">
                <el-input
                  class="inputWidth"
                  v-model.trim="dialogParams.writeCity"
                  disabled
                ></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="12"> </el-col>
          </el-row>
        </section>
        <el-divider content-position="left">整改任务信息</el-divider>
        <section style="padding-top: 10px">
          <el-row :gutter="24">
            <el-col :span="24">
              <el-form-item label="整改任务内容：" prop="rectifyContent">
                <el-input
                  type="textarea"
                  :rows="2"
                  placeholder="请输入整改任务内容"
                  v-model.trim="dialogParams.rectifyContent"
                >
                </el-input>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="24">
              <el-form-item label="整改目标：" prop="rectifyTarget">
                <el-input
                  type="textarea"
                  :rows="2"
                  placeholder="请输入整改目标"
                  v-model.trim="dialogParams.rectifyTarget"
                >
                </el-input>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="24">
              <el-form-item label="任务类型：" prop="taskTypeTwo">
                <div class="pollute-box">
                  <div
                    class="pollute-item"
                    v-for="(item, index) in pollutantArryTwo"
                    :key="index"
                  >
                    <span class="pollute-item-text">{{ item.label }}：</span>
                    <el-checkbox-group
                      v-model="dialogParams.taskTypeTwo"
                      v-for="(itemb, indexb) in item.children"
                      @change="handlePollutionChange"
                      :key="indexb"
                      size="small"
                    >
                      <el-checkbox-button :label="itemb.value">{{
                        itemb.label
                      }}</el-checkbox-button>
                    </el-checkbox-group>
                    <el-input
                      v-model.trim="dialogParams[sortNameArry[index]]"
                      v-show="
                        handleCheckShow(
                          item.children[item.children.length - 1].value
                        )
                      "
                      placeholder=""
                    ></el-input>
                  </div>
                </div>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="12">
              <el-form-item label="牵头单位：">
                <el-select
                  v-model="dialogParams.leadUnit"
                  placeholder="请选择任务类型"
                  @change="handleLeadUnitChange"
                >
                  <el-option
                    v-for="item in leadUnitArry"
                    :key="item.id"
                    :label="item.name"
                    :value="item.id"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="督导单位：" prop="supervisionUnit">
                <el-select
                  v-model="dialogParams.supervisionUnit"
                  placeholder="请选择督导单位"
                  @change="handleSupervisionUnitChange"
                >
                  <el-option
                    v-for="item in supervisionUnitArry"
                    :key="item.id"
                    :label="item.name"
                    :value="item.id"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="12">
              <el-form-item label="责任单位：">
                <el-select
                  v-model="dialogParams.responsibleUnit"
                  placeholder="请选择责任单位"
                  @change="handleResponsibleUnitChange"
                >
                  <el-option
                    v-for="item in responsibleUnitArry"
                    :key="item.id"
                    :label="item.name"
                    :value="item.id"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="完成时限：" prop="deadline">
                <el-date-picker
                  v-model="dialogParams.deadline"
                  format="yyyy-MM"
                  value-format="yyyy-MM"
                  type="month"
                  placeholder="选择完成时限"
                >
                </el-date-picker>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="12">
              <el-form-item label="完成情况：" prop="finishSituation">
                <el-select
                  v-model="dialogParams.finishSituation"
                  placeholder="请选择完成情况"
                  @change="changeStatus"
                >
                  <el-option
                    v-for="item in finishSituationArry"
                    :key="item.id"
                    :label="item.label"
                    :value="item.value"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="重点任务：" prop="isKeyTask">
                <el-select
                  v-model="dialogParams.isKeyTask"
                  placeholder="请选择重点任务"
                >
                  <el-option
                    v-for="item in KeyTaskArry"
                    :key="item.id"
                    :label="item.label"
                    :value="item.value"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="24">
              <el-form-item
                label="任务所在地："
                class="meet-address"
                prop="address"
              >
                <el-select
                  v-model="dialogParams.taskCityCode"
                  filterable
                  placeholder="所在市"
                  @change="handleCityChange"
                >
                  <el-option
                    v-for="item in areaArry"
                    :key="item.id"
                    :label="item.label"
                    :value="item.id"
                  >
                  </el-option>
                </el-select>
                <el-select
                  v-model="dialogParams.taskCountyCode"
                  filterable
                  placeholder="所在县"
                  @change="handleCountyChange"
                >
                  <el-option
                    v-for="item in countyArry"
                    :key="item.id"
                    :label="item.label"
                    :value="item.id"
                  >
                  </el-option>
                </el-select>
                <el-input
                  v-model.trim="dialogParams.taskAddress"
                  maxlength="200"
                  show-word-limit
                  placeholder="详细地址"
                ></el-input>
              </el-form-item>
            </el-col>
          </el-row>
        </section>
        <el-divider content-position="left">整改措施及任务推进情况</el-divider>
        <section style="padding-top: 10px">
          <el-tabs
            v-model="editableTabsValue"
            type="card"
            editable
            @edit="handleTabsEdit"
          >
            <el-tab-pane
              :key="item.id"
              v-for="item in dialogParams.measureDTOList"
              :label="item.title"
              :name="item.name"
            >
              <el-row :gutter="24">
                <el-col :span="24">
                  <el-form-item label="措施标题：" prop="title">
                    <el-input v-model.trim="item.title"> </el-input>
                  </el-form-item>
                </el-col>
              </el-row>
              <el-row :gutter="24">
                <el-col :span="24">
                  <el-form-item label="措施内容：" prop="messure">
                    <el-input
                      type="textarea"
                      :rows="2"
                      placeholder="请输入措施内容"
                      v-model.trim="item.measure"
                    >
                    </el-input>
                  </el-form-item>
                </el-col>
              </el-row>
              <el-row :gutter="24">
                <el-col :span="24">
                  <el-form-item label="完成情况：" prop="finishState">
                    <el-radio
                      v-for="i in finishStateArry"
                      :key="i.value"
                      :value="i.value"
                      :label="i.value"
                      v-model="item.finishState"
                      >{{ i.label }}</el-radio
                    >
                  </el-form-item>
                </el-col>
              </el-row>
              <el-row>
                <el-col :span="24">
                  <el-form-item label="填报人：" prop="filler">
                    <el-input
                      class="inputWidth"
                      v-model.trim="item.fillerName"
                      disabled
                    ></el-input>
                  </el-form-item>
                </el-col>
              </el-row>
            </el-tab-pane>
          </el-tabs>
        </section>
        <div class="dialogFormFooter">
          <el-button type="primary" @click="dailogSubmit">保存</el-button>
          <el-button type="primary" @click="handleDialogClose">关闭</el-button>
        </div>
      </el-form>
    </el-dialog>
    <!-- view、report、check -->
    <el-dialog
      :title="dialogTitle"
      v-if="check"
      :visible="true"
      width="80%"
      :before-close="handleDialogCheckClose"
      append-to-body
    >
      <el-form
        ref="dialogForm2"
        :model="dialogParams"
        :rules="dialogRules"
        label-width="80px"
        class="dialogForm twoLayoutForm"
      >
        <section style="margin-bottom: 30px">
          <el-descriptions
            class="margin-top"
            :column="3"
            size="medium"
            title="方案信息"
            border
          >
            <el-descriptions-item>
              <template slot="label"> 督察级别 </template>
              {{ dialogParams.levelTypeName }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 督察类型 </template>
              {{ dialogParams.inspectTypeName }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 督察轮次 </template>
              {{ dialogParams.roundName }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 督察批次 </template>
              {{ dialogParams.batchName }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 整改方案名称 </template>
              {{ dialogParams.planName }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 地区 </template>
              {{ dialogParams.writeCity }}
            </el-descriptions-item>
          </el-descriptions>
        </section>
        <section style="margin-bottom: 30px">
          <el-descriptions
            class="margin-top"
            :column="3"
            size="medium"
            title="任务信息"
            border
          >
            <el-descriptions-item :span="3">
              <template slot="label">整改任务内容</template>
              {{ dialogParams.rectifyContent }}
            </el-descriptions-item>
            <el-descriptions-item :span="3">
              <template slot="label"> 整改目标 </template>
              {{ dialogParams.rectifyTarget }}
            </el-descriptions-item>
            <el-descriptions-item :span="3">
              <template slot="label"> 任务类型 </template>
              {{ taskText }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 牵头单位 </template>
              {{ dialogParams.leadUnitName }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 督导单位 </template>
              {{ dialogParams.supervisionUnitName }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 责任单位 </template>
              {{ dialogParams.responsibleUnitName }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 完成时限 </template>
              {{ dialogParams.deadline }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 完成情况 </template>
              <el-select
                v-model="dialogParams.finishSituation"
                placeholder="请选择完成情况"
                @change="changeStatus"
              >
                <el-option
                  v-for="item in finishSituationArry"
                  :key="item.id"
                  :label="item.label"
                  :value="item.value"
                >
                </el-option>
              </el-select>
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 重点任务 </template>
              {{ dialogParams.isKeyTaskName }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 大概位置 </template>
              {{ dialogParams.taskCityName }}{{ dialogParams.taskCountyName
              }}{{ dialogParams.taskAddress }}
            </el-descriptions-item>
          </el-descriptions>
        </section>
        <section section>
          <el-tabs
            v-model="editableTabsValue"
            type="card"
            @tab-click="toggleTab"
          >
            <el-tab-pane
              :key="item.id"
              v-for="(item, index) in dialogParams.measureDTOList"
              :label="item.title"
              :name="index"
            >
              <el-descriptions
                class="margin-top"
                :column="3"
                size="medium"
                border
              >
                <el-descriptions-item :span="3">
                  <template slot="label">措施内容</template>
                  {{ item.measure }}
                </el-descriptions-item>
                <el-descriptions-item>
                  <template slot="label"> 完成情况 </template>
                  {{ item.finishStateName }}
                </el-descriptions-item>
                <el-descriptions-item>
                  <template slot="label"> 填报人 </template>
                  {{ item.fillerName }}
                </el-descriptions-item>
              </el-descriptions>
              <section style="padding: 20px 0">
                <el-table
                  :data="item.progressDTOList"
                  style="width: 100%"
                  type="index"
                  border
                  size="small"
                >
                  <el-table-column label="填报时间" width="180">
                    <template slot-scope="scope">
                      {{ scope.row.createDate }}
                    </template>
                  </el-table-column>
                  <el-table-column label="进展情况" width="280">
                    <template slot-scope="scope"
                      ><el-input
                        v-if="
                          curStatus == 'report' &&
                          scope.row.createDate.split('-')[1] == curMounth &&
                          item.finishState != '1'
                        "
                        type="textarea"
                        v-model.trim="scope.row.progress"
                      ></el-input>
                      <span v-else>{{ scope.row.progress }}</span>
                    </template>
                  </el-table-column>
                  <el-table-column label="存在问题" width="280">
                    <template slot-scope="scope">
                      <el-input
                        v-if="
                          curStatus == 'report' &&
                          scope.row.createDate.split('-')[1] == curMounth &&
                          item.finishState != '1'
                        "
                        type="textarea"
                        v-model.trim="scope.row.problem"
                      ></el-input>
                      <span v-else>{{ scope.row.problem }}</span>
                    </template>
                  </el-table-column>
                  <el-table-column label="下步打算" width="280">
                    <template slot-scope="scope"
                      ><el-input
                        v-if="
                          curStatus == 'report' &&
                          scope.row.createDate.split('-')[1] == curMounth &&
                          item.finishState != '1'
                        "
                        type="textarea"
                        v-model.trim="scope.row.nextPlan"
                      ></el-input>
                      <span v-else>{{ scope.row.nextPlan }}</span>
                    </template>
                  </el-table-column>
                  <el-table-column label="是否完成" width="220">
                    <template slot-scope="scope">
                      <div
                        v-if="
                          curStatus == 'report' &&
                          scope.row.createDate.split('-')[1] == curMounth &&
                          item.finishState != '1'
                        "
                      >
                        <el-radio
                          size="mini"
                          v-for="it in finishStateArry"
                          :key="it.value"
                          :value="it.value"
                          :label="it.value"
                          v-model="scope.row.finishState"
                          @change="
                            handleFinishStauts(index, it.value, scope.$index)
                          "
                          >{{ it.label }}</el-radio
                        >
                      </div>
                      <span v-else>{{ scope.row.finishStateName }}</span>
                    </template>
                  </el-table-column>
                  <el-table-column label="证明材料" width="180">
                    <template slot-scope="scope" style="margin: 0 auto">
                      <upload
                        v-if="
                          curStatus == 'report' &&
                          scope.row.createDate.split('-')[1] == curMounth &&
                          item.finishState != '1'
                        "
                        ref="uploadFile"
                        :limit="1"
                        :fileId="scope.row.file"
                        fromKey="file"
                        @setUrlPath="
                          (file) => {
                            setUrlPath(file, index, scope.$index);
                          }
                        "
                        @deleteServeFile="deleteServeFile"
                      ></upload>
                      <a v-else @click="handleDownLoadDoc(scope.row.path)">{{
                        scope.row.fileName
                      }}</a>
                    </template>
                  </el-table-column>
                  <el-table-column label="填报人" width="140">
                    <template slot-scope="scope">
                      <span>{{ scope.row.fillerName }}</span>
                    </template>
                  </el-table-column>
                  <el-table-column
                    label="操作"
                    width="140"
                    v-if="curStatus == 'report'"
                  >
                    <template slot-scope="scope">
                      <el-button
                        size="mini"
                        type="danger"
                        :disabled="
                          scope.row.createDate.split('-')[1] != curMounth ||
                          item.finishState == '1'
                        "
                        @click="handleDelete(scope.$index, scope.row)"
                        >删除</el-button
                      >
                    </template>
                  </el-table-column>
                </el-table>
                <div
                  class="addRecord"
                  v-if="curStatus == 'report' && item.finishState != '1'"
                  @click="addPrgress(index)"
                >
                  <i class="el-icon-plus"></i>
                  <span style="margin-left: 10px">新增任务推进记录</span>
                </div>
              </section>
            </el-tab-pane>
          </el-tabs>
        </section>
        <section v-if="curStatus == 'check'">
          <div class="section-title">核实信息</div>
          <el-row :gutter="24">
            <el-col :span="12">
              <el-form-item label="核实人：" prop="verifier">
                <el-input
                  class="inputWidth"
                  v-model.trim="dialogParams.rectifyVerify.verifiername"
                  disabled
                ></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="核实时间：" prop="verfityTime">
                <el-input
                  class="inputWidth"
                  v-model.trim="dialogParams.rectifyVerify.verfityTime"
                  disabled
                ></el-input>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="24">
              <el-form-item label="核实内容：" prop="verfityContent">
                <el-input
                  class="inputWidth"
                  type="textarea"
                  v-model.trim="dialogParams.rectifyVerify.verfityContent"
                ></el-input>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="24">
              <el-form-item label="核实意见：" prop="verfitySuggestion">
                <el-input
                  class="inputWidth"
                  type="textarea"
                  v-model.trim="dialogParams.rectifyVerify.verfitySuggestion"
                ></el-input>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="24">
              <el-form-item label="核实情况：" prop="city">
                <el-radio
                  v-for="i in verfitySituationArry"
                  :key="i.value"
                  :value="i.value"
                  :label="i.value"
                  v-model="dialogParams.rectifyVerify.verfitySituation"
                  >{{ i.label }}</el-radio
                >
              </el-form-item>
            </el-col>
            <el-col :span="12"> </el-col>
          </el-row>
        </section>
        <section v-if="curStatus == 'view'">
          <el-descriptions
            class="margin-top"
            :column="2"
            size="medium"
            border
            title="核实信息"
          >
            <el-descriptions-item>
              <template slot="label">核实人</template>
              {{ dialogParams.rectifyVerify.verifiername }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 核实内容 </template>
              {{ dialogParams.rectifyVerify.verfityContent }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 核实时间 </template>
              {{ dialogParams.rectifyVerify.verfityTime }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label" :span="3"> 核实意见 </template>
              {{ dialogParams.rectifyVerify.verfitySuggestion }}
            </el-descriptions-item>
            <el-descriptions-item>
              <template slot="label"> 核实情况 </template>
              {{ dialogParams.rectifyVerify.verfitySituationName }}
            </el-descriptions-item>
          </el-descriptions>
        </section>
        <div class="dialogFormFooter">
          <el-button
            v-if="curStatus != 'view'"
            type="primary"
            @click="dailogSubmit"
            >保存</el-button
          >
          <el-button type="primary" @click="handleDialogCheckClose"
            >关闭</el-button
          >
        </div>
      </el-form>
    </el-dialog>
  </div>
</template>

<script>
import {
  getChangeTaskList,
  saveChangeTask,
  getRoundOrBatchList,
  getSpectTypeList,
  getCityList,
  getTaskDetail,
  getAllChangeProgramList,
  getProgressList,
  getUnitList,
  deleteProgress,
} from "@/api/change/dispatch";
import { getdownLoadZip, getSingleInfo } from "@/utils/styem";
import { getFileInfo } from "@/api/file";
import { areaTreeNew } from "@/api/styem/dept";
import { dictListType } from "@/api/styem/dict/type";
import { mapGetters } from "vuex";
import { getCurrentTime } from "@/utils/date";
const initMeasureDTOList = {
  measure: "",
  finishState: "",
  filler: "",
  fillerName: "",
  title: "措施1",
  name: "0",
  content: "Tab 1 content",
  progressDTOList: [],
};
const initRectifyVerify = {
  verfityTime: "",
  verifier: "",
  verifiername: "",
  verfitySuggestion: "",
  verfityContent: "",
  verfitySituation: "",
};
const initData = {
  levelType: undefined,
  levelTypeName: "",
  inspectType: undefined,
  inspectTypeName: "",
  roundName: "",
  roundId: "",
  batchId: undefined,
  batchName: "",
  planId: undefined,
  planName: "",
  writeCityCode: "",
  writeCity: "",
  rectifyContent: "",
  rectifyTarget: "",
  leadUnit: "", //牵头单位
  leadUnitName: "",
  supervisionUnit: "", //督导单位
  supervisionUnitName: "",
  responsibleUnit: "", //责任单位
  responsibleUnitName: "",
  taskTypeOne: [],
  taskTypeOne: "",
  taskTypeOneName: "",
  taskTypeTwo: [],
  taskTypeTwoName: [],
  finishSituation: "",
  finishSituationName: "",
  deadline: "",
  isKeyTask: "",
  isKeyTaskName: "",
  measureDTOList: [{ ...initMeasureDTOList }],
  rectifyVerify: { ...initRectifyVerify },
  taskCityCode: "",
  taskCityName: "",
  taskCountyCode: "",
  taskCountyName: "",
  taskAddress: "",
};
export default {
  data() {
    var validAddress = (rule, value, callback) => {
      const { taskCityCode, taskCountyCode, taskAddress } = this.dialogParams;
      if (taskCityCode && taskCountyCode && taskAddress) {
        callback();
        return;
      }
      if (!taskCityCode) {
        callback(new Error("请选择所在市"));
        return;
      }
      if (!taskCountyCode) {
        callback(new Error("请选择所在县"));
        return;
      }
      if (!taskAddress) {
        callback(new Error("请填写详细地址"));
        return;
      }
    };
    return {
      taskText: "",
      isHandleChange: false,
      curMounth: 0,
      buttonAuthority: true,
      curStatus: "",
      showSearch: true,
      queryParams: {
        levelType: undefined,
        inspectType: undefined,
        roundId: undefined,
        batchId: undefined,
        pageNo: 1,
        pageSize: 10,
        planId: undefined,
      },
      superviseLevelArry: [], //督察级别
      inspectTypeArry: [], // 督察类型字典
      superviseRoundArry: [], //轮次下拉
      superviseBatchArry: [], //批次下拉
      inspectTypeArry2: [], // 督察类型字典-弹框
      superviseRoundArry2: [], //轮次下拉 --弹框
      superviseBatchArry2: [], //批次下拉 --弹框
      superviseNameArry: [], //方案名称下拉
      superviseNameArry2: [], //方案名称下拉--弹框
      pollutantArryTwo: [],
      cityArry: [],
      finishSituationArry: [],
      KeyTaskArry: [],
      finishStateArry: [],
      leadUnitArry: [],
      responsibleUnitArry: [],
      supervisionUnitArry: [],
      verfitySituationArry: [],
      List: [],
      total: 0,
      loading: true,
      dialogTitle: "整改方案",
      open: false,
      dialogParams: { ...initData },
      dialogRules: {
        levelType: [
          { required: true, message: "请选择督察级别", trigger: "change" },
        ],
        inspectType: [
          { required: true, message: "请选择督察类型", trigger: "change" },
        ],
        roundId: [
          { required: true, message: "请选择督察轮次", trigger: "change" },
        ],
        batchId: [
          { required: true, message: "请选择督察批次", trigger: "change" },
        ],
        planId: [
          { required: true, message: "请选择督察批次", trigger: "change" },
        ],
        rectifyContent: [{ required: true, message: "请输入整改任务内容" }],
        rectifyTarget: [{ required: true, message: "请输入整改目标" }],
        taskTypeTwo: [
          { required: true, message: "请选择任务类型", trigger: "change" },
        ],
        // leadUnit: [
        //   { required: true, message: "请选择牵头单位", trigger: "blur" },
        // ],
        deadline: [
          { required: true, message: "请选择完成时限", trigger: "blur" },
        ],
        finishSituation: [
          { required: true, message: "请选择完成时限", trigger: "blur" },
        ],
        isKeyTask: [
          { required: true, message: "请选择重点任务", trigger: "change" },
        ],
        address: [{ required: true, validator: validAddress, trigger: "blur" }],
        // title: [{ required: true, validator: validEmpty, trigger: "blur" }],
        // messure: [{ required: true, validator: validEmpty,trigger: "blur" }],
        // finishState: [{ required: true, validator: validEmpty,trigger: "change" }],
      },
      sortNameArry: [
        "otherWater",
        "otherAir",
        "otherSoil",
        "otherOcean",
        "otherEcology",
        "otherRadiation",
        "otherNoise",
        "other",
      ],
      check: false,
      editableTabsValue: "0",
      now: "",
      countyArry: [],
      tabIndex: 0,
    };
  },
  computed: {
    ...mapGetters(["userInfo", "areaArry"]),
    handleCheckShow() {
      return function (value) {
        return this.dialogParams.taskTypeTwo.indexOf(value) > -1 ? true : false;
      };
    },
  },

  watch: {
    "dialogParams.finishSituation": {
      immediate: false,
      deep: true,
      handler: function (newV, oldV) {
        if (!this.isHandleChange) {
          return;
        }
        if (newV == "1") {
          let isAllFinished = true;
          this.dialogParams.measureDTOList.forEach((item) => {
            if (item.finishState != "1") {
              isAllFinished = false;
            }
          });
          if (!isAllFinished) {
            this.$alert("还有未完成的措施，请先完成所有措施", {
              confirmButtonText: "确定",
              callback: (action) => {
                this.$set(this.dialogParams, "finishSituation", oldV);
                this.isHandleChange = false;
              },
            });
          }
        }
      },
    },
  },
  created() {
    if (this.userInfo.weatherRectify) {
      this.buttonAuthority = true;
    } else {
      this.buttonAuthority = false;
    }
    this.getChangeTaskList();
    this.getSuperviseLevelList();
    this.getCityList();
    this.getDictPollutantTwo();
    this.getfinishSituationList();
    this.getKeyTaskList();
    this.getFinishStateArry();
    this.curMounth = getCurrentTime().split("-")[1];
  },
  methods: {
    changeStatus: function () {
      this.isHandleChange = true;
    },
    handleFinishStauts: function (i, v, pid) {
      if (v == "1") {
        this.$confirm(
          "本措施完成后，将不再进行每月措施填报, 是否确定完成?",
          "提示",
          {
            confirmButtonText: "确定",
            cancelButtonText: "取消",
            type: "warning",
          }
        ).then(() => {
          this.$set(this.dialogParams.measureDTOList[i], "finishState", 1);
          this.$set(
            this.dialogParams.measureDTOList[i],
            "finishStateName",
            "已完成"
          );
          this.$set(
            this.dialogParams.measureDTOList[i].progressDTOList[pid],
            "finishStateName",
            "已完成"
          );
        });
      }
    },
    async getChangeTaskList() {
      this.loading = true;
      const reponse = await getChangeTaskList(this.queryParams);
      this.List = reponse.data.list;
      this.total = reponse.data.count;
      this.loading = false;
    },
    handleNewly() {
      this.curStatus = "new";
      this.dialogParams.measureDTOList[0].filler = this.userInfo.id;
      this.dialogParams.measureDTOList[0].fillerName = this.userInfo.name;
      this.dialogTitle = "新增任务";
      this.open = true;
    },
    handleDialogClose() {
      this.open = false;
      this.handleformClear();
      this.clearDialog();
      this.$refs.uploadFile && this.$refs.uploadFile.handleClear();
    },
    onQuery() {
      this.getChangeTaskList();
      this.queryParams.pageNo = 1;
    },
    clearDialog: function () {
      for (let i in this.dialogParams) {
        if (i != "writeCityCode" && i != "writeCity") {
          this.$set(this.dialogParams, i, initData[i]);
        }
        if (i == "measureDTOList") {
          this.$set(this.dialogParams, "measureDTOList", []);
          this.dialogParams.measureDTOList.push({
            ...initMeasureDTOList,
            progressDTOList: [],
          });
        }
      }
      this.editableTabsValue = "0";
      this.editableTabsValue = "0";
      this.tabIndex = 0;
    },
    onClear() {
      this.queryParams.levelType = undefined;
      this.queryParams.inspectType = undefined;
      this.queryParams.roundId = undefined;
      this.queryParams.batchId = undefined;
      this.queryParams.planId = undefined;
    },
    async dailogSubmit() {
      this.dialogParams.measureDTOList.forEach((item) => {
        if (item.title == "") {
          this.$message.warning(`措施标题不能为空`);
          return;
        }
        if (item.messure == "") {
          this.$message.warning(`措施内容不能为空`);
          return;
        }
        if (item.finishState == "") {
          this.$message.warning(`措施内容不能为空`);
          return;
        }
      });
      let form = this.$refs.dialogForm1
        ? this.$refs.dialogForm1
        : this.$refs.dialogForm2;
      form.validate(async (valid) => {
        if (valid) {
          if (this.curStatus == "new") {
            this.dialogParams.taskTypeOne =
              this.dialogParams.taskTypeOne.join(",");
            this.dialogParams.taskTypeTwo =
              this.dialogParams.taskTypeTwo.join(",");
          }
          saveChangeTask(this.dialogParams).then((res) => {
            this.getChangeTaskList();
            this.open = false;
            this.check = false;
            this.handleformClear();
            this.clearDialog();
            this.$refs.uploadFile && this.$refs.uploadFile.handleClear();
          });
        }
      });
    },
    handleDialogCheckClose() {
      this.check = false;
      this.handleCheckClear();
      this.handleformClear();
      this.clearDialog();
      this.$refs.uploadFile && this.$refs.uploadFile.handleClear();
    },
    handleSee(info, type) {
      if (type == "check") {
        this.now = getCurrentTime();
        this.getVerfitySituationArry();
        this.dialogTitle = "现场核实";
      }
      if (type == "report") {
        this.dialogTitle = "进度填报";
      }
      if (type == "view") {
        this.dialogTitle = "查看";
      }
      this.curStatus = type;
      this.getDialogInfo(info);
      this.getTaskDetail(info.id);
      this.check = true;
    },
    getTaskDetail: function (id) {
      getTaskDetail({
        id,
      }).then((res) => {
        this.$set(this.dialogParams, "measureDTOList", res.data.taskMeasure);
        this.$set(this.dialogParams, "rectifyVerify", res.data.verify);
        if (this.curStatus == "check") {
          this.dialogParams.rectifyVerify.verfityTime = this.now;
          this.dialogParams.rectifyVerify.verifiername = this.userInfo.name;
          this.dialogParams.rectifyVerify.verifier = this.userInfo.id;
        }

        this.$nextTick(() => {
          this.getProgressList(this.dialogParams.measureDTOList[0].id, 0);
        });
      });
    },

    async handleEdit(info) {
      this.dialogTitle = "修改";
      this.getDialogInfo(info);
      this.changeSuperviseLevel(2, 1);
      this.changeinspectType(2, 1);
      this.changeSuperviseRound(2, 1);
      this.open = true;
    },
    getDialogInfo(info) {
      for (let key in this.dialogParams) {
        if (info[key]) {
          this.$set(this.dialogParams, key, info[key]);
        }
      }
      let arr = [];
      this.dialogParams.taskTypeTwoName.split(",").forEach((item) => {
        if (item != "其他") {
          arr.push(item);
        }
      });
      this.sortNameArry.forEach((item) => {
        if (info[item]) {
          arr.push(info[item]);
        }
      });
      this.taskText = arr.join(",");
    },
    async getSingleMessagInfo(fileId) {
      const reponse = await getFileInfo({ ids: fileId });
      if (reponse.data && reponse.data.length) {
        const subject = reponse.data;
        if (reponse.data && reponse.data.length) {
          const subject = reponse.data;
          this.attachementName = subject[0].file_name;
          this.attachementPath = subject[0].save_path;
        }
      }
    },
    handlePreviewClick() {},
    handleformClear() {
      this.resetFieldsTap("dialogForm");
      this.dialogParams.id = undefined;
    },
    handleCheckClear() {
      this.dialogParams.id = undefined;
      this.dialogParams.title = undefined;
      this.dialogParams.fileId = undefined;
      this.dialogParams.reportDate = undefined;
    },
    issueDateChange(picker) {
      if (picker == null) {
        this.queryParams.beginReportDate = undefined;
        this.queryParams.endReportDate = undefined;
      } else {
        this.queryParams.beginReportDate = picker[0];
        this.queryParams.endReportDate = picker[1];
      }
    },
    setUrlPath(file, index, i) {
      this.dialogParams["measureDTOList"][index].progressDTOList[i][
        file.fromKey
      ] = file.fileId;
    },
    deleteServeFile(file) {
      this.dialogParams["measureDTOList"][index].progressDTOList[i][
        file.fromKey
      ] = undefined;
    },
    handleDownLoadDoc(path) {
      getdownLoadZip(path);
    },
    handleDownloadClick(fileId) {
      getSingleInfo(fileId);
    },
    //   dq

    getSuperviseLevelList: function () {
      getSpectTypeList({ parentId: 0 }).then((res) => {
        this.superviseLevelArry = res.data;
      });
    },
    getCityList: function () {
      getCityList().then((res) => {
        this.dialogParams.writeCity = res.data.teamInfo.areaName;
        this.dialogParams.writeCityCode = res.data.teamInfo.areaCode;
        this.getUnitArry(res.data.teamInfo.areaCode, "1");
        this.getUnitArry(res.data.teamInfo.areaCode, "2");
        this.getUnitArry(res.data.teamInfo.areaCode, "3");
      });
    },
    changeSuperviseLevel: function (type, isreshow) {
      let value, relatedArr, id;
      this.getSuperviseNameList(type);
      if (type == "2") {
        value = this.dialogParams.levelType;
        relatedArr = "inspectTypeArry2";
        //清空关联表单
        this.inspectTypeArry2 = [];
        this.superviseRoundArry2 = [];
        this.superviseBatchArry2 = [];
        this.superviseNameArry2 = [];
        if (!isreshow) {
          this.dialogParams.inspectType = undefined;
          this.dialogParams.roundId = undefined;
          this.dialogParams.batchId = undefined;
          this.dialogParams.planId = undefined;
        }
      } else {
        value = this.queryParams.levelType;
        relatedArr = "inspectTypeArry";
        this.inspectTypeArry = [];
        this.superviseRoundArry = [];
        this.superviseBatchArry = [];
        this.superviseNameArry = [];
        this.queryParams.inspectType = undefined;
        this.queryParams.roundId = undefined;
        this.queryParams.batchId = undefined;
        this.queryParams.planId = undefined;
      }
      this.superviseLevelArry.forEach((item) => {
        if (item.value == value) {
          id = item.id;
        }
      });
      getSpectTypeList({ parentId: id })
        .then((res) => {
          this[relatedArr] = res.data;
        })
        .catch((res) => {});
    },
    changeinspectType: function (type, isreshow) {
      let value, relatedArr;
      this.getSuperviseNameList(type);
      if (type == "2") {
        value = this.dialogParams.inspectType;
        relatedArr = "superviseRoundArry2";
        //清空关联表单
        this.superviseRoundArry2 = [];
        this.superviseBatchArry2 = [];
        this.superviseNameArry2 = [];
        if (!isreshow) {
          this.dialogParams.roundId = undefined;
          this.dialogParams.batchId = undefined;
          this.dialogParams.planId = undefined;
        }
      } else {
        value = this.queryParams.inspectType;
        relatedArr = "superviseRoundArry";
        this.superviseRoundArry = [];
        this.superviseBatchArry = [];
        this.superviseNameArry = [];
        this.queryParams.roundId = undefined;
        this.queryParams.batchId = undefined;
        this.queryParams.planId = undefined;
      }
      getRoundOrBatchList({ superviseType: value }).then((res) => {
        res.data.forEach((item) => {
          item.batchId = item.batchId.toString();
        });
        this[relatedArr] = res.data;
      });
    },
    changeSuperviseRound: function (type, isreshow) {
      let value, relatedArr;
      this.getSuperviseNameList(type);
      if (type == "2") {
        value = this.dialogParams.roundId;
        relatedArr = "superviseBatchArry2";
        //清空关联表单
        this.superviseBatchArry2 = [];
        this.superviseNameArry2 = [];
        if (!isreshow) {
          this.dialogParams.batchId = undefined;
          this.dialogParams.planId = undefined;
        }
      } else {
        value = this.queryParams.roundId;
        relatedArr = "superviseBatchArry";
        this.superviseBatchArry = [];
        this.superviseNameArry = [];
        this.queryParams.batchId = undefined;
        this.queryParams.planId = undefined;
      }
      getRoundOrBatchList({ id: value }).then((res) => {
        res.data.forEach((item) => {
          item.batchId = item.batchId.toString();
        });
        this[relatedArr] = res.data;
      });
    },
    changeSuperviseBatch: function (type, isreshow) {
      if (type == "2") {
        this.superviseNameArry2 = [];
        this.dialogParams.planId = undefined;
      } else {
        this.superviseNameArry = [];
        this.queryParams.planId = undefined;
      }
      this.getSuperviseNameList(type);
    },
    getSuperviseNameList: function (type) {
      let source, relatedArr;
      if (type == "2") {
        source = "dialogParams";
        relatedArr = "superviseNameArry2";
      } else {
        source = "queryParams";
        relatedArr = "superviseNameArry";
      }
      let parmas = {
        levelType: this[source].levelType,
        inspectType: this[source].inspectType,
        roundId: this[source].roundId,
        batchId: this[source].batchId,
      };
      getAllChangeProgramList(parmas).then((res) => {
        this[relatedArr] = res.data;
      });
    },
    getfinishSituationList: function () {
      dictListType({
        type: "execution",
      }).then((res) => {
        this.finishSituationArry = res.data;
      });
    },
    getFinishStateArry: function () {
      dictListType({
        type: "check_success",
      }).then((res) => {
        this.finishStateArry = res.data;
      });
    },
    getKeyTaskList: function () {
      dictListType({
        type: "yes_no",
      })
        .then((res) => {
          this.KeyTaskArry = res.data;
        })
        .catch();
    },
    handlePollutionChange() {
      const itemIndexArry = [];
      for (const item in this.pollutantArryTwo) {
        const subject = this.pollutantArryTwo[item];
        for (const itemb in subject.children) {
          const subjectb = subject.children[itemb];
          if (this.dialogParams.taskTypeTwo.indexOf(subjectb.value) > -1) {
            itemIndexArry.push(Number(item) + 1);
          }
        }
      }
      this.dialogParams.taskTypeOne = [...new Set(itemIndexArry)];
    },
    async getDictPollutantTwo() {
      const reponse = await dictListType({
        type: "clue_pollution_type",
        next: 1,
      });
      const menu = this.handleTree(
        reponse.data,
        "id",
        "parentId",
        "children",
        "0"
      );
      this.pollutantArryTwo = menu;
    },
    handleTabsEdit(targetName, action) {
      if (action === "add") {
        this.tabIndex += 1;
        let newTabName = "措施" + (this.tabIndex + 1);
        this.dialogParams.measureDTOList.push({
          measure: "",
          finishState: "",
          filler: this.userInfo.id,
          fillerName: this.userInfo.name,
          title: newTabName,
          name: this.tabIndex.toString(),
          content: "New Tab content",
          progressDTOList: [],
        });
        this.editableTabsValue = this.tabIndex.toString();
      }
      if (action === "remove") {
        let tabs = this.dialogParams.measureDTOList;
        let activeName = this.editableTabsValue;
        if (activeName === targetName) {
          tabs.forEach((tab, index) => {
            if (tab.name === targetName) {
              let nextTab = tabs[index + 1] || tabs[index - 1];
              if (nextTab) {
                activeName = nextTab.name;
              }
            }
          });
        }
        this.editableTabsValue = activeName.toString();
        this.dialogParams.measureDTOList = tabs.filter(
          (tab) => tab.name !== targetName
        );
      }
    },
    addPrgress: function (index) {
      let curTime = getCurrentTime();
      let isRepet = false;
      if (this.dialogParams.measureDTOList[index].progressDTOList) {
        this.dialogParams.measureDTOList[index].progressDTOList.forEach(
          (item) => {
            if (item.createDate.split("-")[1] == this.curMounth) {
              this.$message.error("本月已有填报，请勿重复填报");
              isRepet = true;
            }
          }
        );
      }
      !isRepet &&
        this.dialogParams.measureDTOList[index].progressDTOList.push({
          createDate: curTime,
          progress: "",
          problem: "",
          nextPlan: "",
          finishState: "",
          file: "",
          fileName: "",
          path: "",
          filler: this.userInfo.id,
          fillerName: this.userInfo.name,
        });
    },
    toggleTab: function (tab) {
      this.getProgressList(
        this.dialogParams.measureDTOList[tab.index].id,
        tab.index
      );
    },
    getProgressList: function (id, index) {
      //请求详情
      getProgressList({
        measureId: id,
      }).then((res) => {
        if (res.code == "200") {
          let arr = res.data || [];
          let promiseArr = [];
          arr.forEach((item) => {
            if (item.file) {
              const promisHttp = getFileInfo({
                ids: item.file,
              }).then((res) => {
                item.fileName = res.data[0].file_name;
                item.path = res.data[0].save_path;
              });
              promiseArr.push(promisHttp);
            }
          });
          Promise.all(promiseArr).then(() => {
            if (!this.dialogParams.measureDTOList[index].progressDTOList) {
              this.$set(
                this.dialogParams.measureDTOList[index],
                "progressDTOList",
                arr
              );
              this.$forceUpdate();
            }
          });
        }
      });
    },
    getUnitArry: function (city, type) {
      getUnitList({
        type,
        city,
      })
        .then((res) => {
          if (type == "1") {
            this.leadUnitArry = res.data;
          }
          if (type == "2") {
            this.responsibleUnitArry = res.data;
          }
          if (type == "3") {
            this.supervisionUnitArry = res.data;
          }
        })
        .catch();
    },
    handleDelete: function (i) {
      let id =
        this.dialogParams.measureDTOList[this.editableTabsValue]
          .progressDTOList[i].id;
      if (id) {
        //旧数据
        deleteProgress({ id }).then((res) => {
          if (res.code == "200") {
            this.getProgressList(
              this.dialogParams.measureDTOList[this.editableTabsValue].id,
              this.editableTabsValue
            );
          }
        });
      } else {
        // 新数据
        this.dialogParams.measureDTOList[
          this.editableTabsValue
        ].progressDTOList.splice(i, 1);
      }
    },
    getVerfitySituationArry: function () {
      dictListType({
        type: "zg_execution",
      })
        .then((res) => {
          this.verfitySituationArry = res.data;
        })
        .catch();
    },
    handleLeadUnitChange: function (code) {
      this.leadUnitArry.forEach((item) => {
        if (item.id == code) {
          this.dialogParams.leadUnitName = item.name;
        }
      });
    },
    handleSupervisionUnitChange: function (code) {
      this.supervisionUnitArry.forEach((item) => {
        if (item.id == code) {
          this.dialogParams.supervisionUnitName = item.name;
        }
      });
    },
    handleResponsibleUnitChange: function (code) {
      this.responsibleUnitArry.forEach((item) => {
        if (item.id == code) {
          this.dialogParams.responsibleUnitName = item.name;
        }
      });
    },
    async handleCityChange(code) {
      this.countyArry = [];
      this.areaArry.forEach((item) => {
        if (item.id == code) {
          this.dialogParams.taskCityName = item.label;
        }
      });
      this.dialogParams.countyCode = undefined;
      const reponse = await areaTreeNew({ parentId: code });
      this.countyArry = reponse.data;
    },
    async handleCountyChange(code) {
      this.countyArry.forEach((item) => {
        if (item.id == code) {
          this.dialogParams.taskCountyName = item.label;
        }
      });
    },
  },
};
</script>
<style lang="scss" scoped>
.meet-address {
  .el-form-item__content {
    .el-select {
      width: 25% !important;
      padding-right: 10px;
    }
    .el-input {
      width: 50% !important;
    }
  }
}
.twoLayoutForm .el-form-item /deep/ .el-form-item__label {
  width: 150px !important;
}
.inline {
  display: inline-block !important;
}
.pollute-item {
  display: flex;
  align-items: center;
  .pollute-item-text {
    font-size: 14px;
    text-align: right;
    margin-right: 0px;
    width: 70px;
  }
  /deep/.el-input {
    width: 100px !important;
    .el-input__inner {
      font-size: 14px;
    }
  }
}
.addRecord {
  height: 50px;
  line-height: 50px;
  border: 1px solid #ebeef5;
  background: #ebf2f6;
  color: gray;
  text-align: center;
}
.dialogFormFooter {
  padding-top: 30px;
}
.demo-table-expand {
  font-size: 0;
}
.demo-table-expand label {
  width: 90px;
  color: #99a9bf;
}
.demo-table-expand .el-form-item {
  margin-right: 0;
  margin-bottom: 0;
  width: 50%;
}
.emptyInfo {
  text-align: center;
  height: 50px;
  line-height: 50px;
}
.section-title {
  font-size: 16px;
  font-weight: 700;
  color: black;
  padding-bottom: 20px;
}
</style>


