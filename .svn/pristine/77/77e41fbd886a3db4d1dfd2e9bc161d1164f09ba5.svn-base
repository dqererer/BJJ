import store from '@/store'
import { getFileInfo } from "@/api/file";
import { downLoadZip } from "@/utils/zipdownload";
import { seeting } from "@/utils/deploy"
//From表单清除
export function resetFieldsTap(forName) {
	const arr = Object.keys(this.$refs)
	if (arr.indexOf(forName) > -1 && this.$refs[forName]) {
		this.$refs[forName].resetFields();
	} else {
		return
	}
}

export function tabControlShow(num) {
	this.$nextTick(function () {
		this.$refs.tabs.$children[0].$refs.tabs[num].style.display = "inline-block";
	});
}
export function tabControlHide(num) {
	this.$nextTick(function () {
		this.$refs.tabs.$children[0].$refs.tabs[num].style.display = "none";
	});
}

/**
 * 构造树型结构数据
 * @param {*} data 数据源
 * @param {*} id id字段 默认 'id'
 * @param {*} parentId 父节点字段 默认 'parentId'
 * @param {*} children 孩子节点字段 默认 'children'
 * @param {*} rootId 根Id 默认 0
 */
export function handleTree(data, id, parentId, children, rootId) {
	id = id || 'id'
	parentId = parentId || 'pId'
	children = children || 'children'
	rootId = rootId || '0'

	//对源数据深度克隆
	const cloneData = JSON.parse(JSON.stringify(data))
	//循环所有项
	const treeData = cloneData.filter(father => {
		const branchArr = cloneData.filter(child => {
			//返回每一项的子级数组
			return father[id] === child[parentId]
		});
		branchArr.length > 0 ? father.children = branchArr : '';

		//返回第一层
		return father[parentId] === rootId;
	});
	return treeData != '' ? treeData : data;
}

export function format(time, fmt) {
	var o = {
		"M+": time.getMonth() + 1,                 //月份 
		"d+": time.getDate(),                    //日 
		"h+": time.getHours(),                   //小时 
		"m+": time.getMinutes(),                 //分 
		"s+": time.getSeconds(),                 //秒 
		"q+": Math.floor((time.getMonth() + 3) / 3), //季度 
		"S": time.getMilliseconds()             //毫秒 
	};
	if (/(y+)/.test(fmt)) {
		fmt = fmt.replace(RegExp.$1, (time.getFullYear() + "").substr(4 - RegExp.$1.length));
	}
	for (var k in o) {
		if (new RegExp("(" + k + ")").test(fmt)) {
			fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
		}
	}
	return fmt;
}
export async function getSingleInfo(fileId) {
	const reponse = await getFileInfo({ ids: fileId });
	const subject = reponse.data;
	const fileUrl = subject[0].save_path;
	const fileName = subject[0].file_name;
	const state = subject[0].object_id;
	if (state === "FASTDFS") {
		const fastInfo = localStorage.getItem("fastInfo");
		const fastSubject = JSON.parse(fastInfo)
		// window.location.href = fastSubject.downloadUrl + fileUrl + "?fileName=" + fileName;
		const aLink = document.createElement('a')
		aLink.href = fastSubject.downloadUrl + fileUrl + "?fileName=" + fileName;
		console.log(aLink);
		aLink.setAttribute('download', fileName)
		document.body.appendChild(aLink)
		aLink.click()
	} else {
		getdownLoadZip(fileUrl)
	}
}

export async function getKnownSingleInfo(fileUrl, fileName, state) {
	if (state === "FASTDFS") {
		const fastInfo = localStorage.getItem("fastInfo");
		const fastSubject = JSON.parse(fastInfo)
		const path = fastSubject.downloadUrl + fileUrl;
		// window.location.href = fastSubject.downloadUrl + fileUrl + "?fileName=" + fileName;
		const aLink = document.createElement('a')
		aLink.href = fastSubject.downloadUrl + fileUrl + "?fileName=" + fileName;
		aLink.setAttribute('download', "")
		aLink.setAttribute("target", "_blank");
		console.log(fileName);
		document.body.appendChild(aLink)
		aLink.click()
		document.body.removeChild(aLink)
	} else {
		getdownLoadZip(fileUrl)
	}
}
function downloadIamge(imgsrc, name) {//下载图片地址和自定义图片名称
	let image = new Image();
	// 解决跨域 Canvas 污染问题
	image.setAttribute("crossOrigin", "anonymous");
	image.onload = function () {
		let canvas = document.createElement("canvas");
		canvas.width = image.width;
		canvas.height = image.height;
		let context = canvas.getContext("2d");
		context.drawImage(image, 0, 0, image.width, image.height);
		let url = canvas.toDataURL("image/png"); //得到图片的base64编码数据
		let a = document.createElement("a"); // 生成一个a元素
		let event = new MouseEvent("click"); // 创建一个单击事件
		a.download = name || "qrcode.jpg"; // 设置图片名称
		a.href = url; // 将生成的URL设置为a.href属性
		a.dispatchEvent(event); // 触发a的单击事件
	};
	image.src = imgsrc;
}
export function getdownLoadZip(path) {
	downLoadZip("/center/file/downloadFile", { savePath: path });
}

export async function filePreview(fileId) {
	const reponse = await getFileInfo({ ids: fileId });
	const subject = reponse.data;
	const fileUrl = subject[0].save_path;
	const state = subject[0].object_id;
	handlePreview(state,fileUrl);
}
export async function filetKnownPreview(state,fileUrl) {
	handlePreview(state,fileUrl);
}
function handlePreview(state,fileUrl) {
	const aLink = document.createElement("a");
	const baseUrl = process.env.VUE_APP_BASE_API;
	if (state === "FASTDFS") {
		const fastInfo = localStorage.getItem("fastInfo");
		const fastSubject = JSON.parse(fastInfo);
		const path = fastSubject.downloadUrl + fileUrl;
		aLink.href = `${seeting.filePreviewIP}/?furl=${path}`;
		aLink.setAttribute("target", "_blank");
		document.body.appendChild(aLink);
		aLink.click();
	} else {
		let path;
		if (process.env.NODE_ENV === "production") {
			path = `${seeting.filePreviewIP}/?furl=${seeting.onLineIP}${baseUrl}/center/file/downloadFile?savePath=${fileUrl}`;
		} else {
			path = `${seeting.filePreviewIP}/?furl=${seeting.localIP}${baseUrl}/center/file/downloadFile?savePath=${fileUrl}`;
		}
		aLink.href = path;
		aLink.setAttribute("target", "_blank");
		document.body.appendChild(aLink);
		aLink.click();
		document.body.removeChild(aLink)
	}
}
export function hasPermission(permissionsFlag) {
	const all_permission = "*:*:*";
	const permissions = store.getters.permissions;
	let hasPermission = false;
	if (permissions) {
		hasPermission = permissions.some(permissionItem => {
			return (
				all_permission === permissionItem ||
				permissionsFlag.includes(permissionItem)
			);
		});
	}
	return hasPermission;
}