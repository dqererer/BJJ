<template>
  <div>
    <div class="tab-list-content">
      <div class="box-body" v-show="showSearch">
        <el-form :model="queryParams" label-width="180px">
          <el-row>
            <el-col :span="12">
              <el-form-item label="姓名：">
                <el-input v-model="queryParams.name" placeholder="请输入姓名"></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="身份证号：">
                <el-input v-model="queryParams.idCard" placeholder="请输入身份证号"></el-input>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="12">
              <el-form-item label="手机号：">
                <el-input v-model="queryParams.telephone" placeholder="请输入手机号"></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="是否在督察组：">
                <el-select v-model="queryParams.state" placeholder="请是否在督察组">
                  <el-option label="否" value="0"></el-option>
                  <el-option label="是" value="1"></el-option>
                </el-select>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-form-item class="pull-right">
              <el-button type="primary" @click="onQuery">查询</el-button>
              <el-button type="primary" @click="onClear">清空</el-button>
            </el-form-item>
          </el-row>
        </el-form>
      </div>
      <el-row :gutter="10" class="mb8">
        <el-button size="small" @click="handleNewly" type="primary">新增</el-button>
        <el-button size="small" type="primary" @click="handleImport">导入</el-button>
        <el-button size="small" type="primary" @click="handleExport">导出</el-button>
        <right-toolbar :showSearch.sync="showSearch" @queryTable="getList"></right-toolbar>
      </el-row>
      <el-table v-loading="loading" :data="List" border :stripe="true">
        <el-table-column width="50" label="序号">
          <template scope="scope">
            <span>
              {{
              (queryParams.pageNo - 1) * queryParams.pageSize + scope.$index + 1
              }}
            </span>
          </template>
        </el-table-column>
        <el-table-column min-width="120" label="姓名">
          <template v-slot="scope">
            <span class="accounChunk" @click="handleSee(scope.row)">
              {{
              scope.row.name
              }}
            </span>
          </template>
        </el-table-column>
        <el-table-column prop="sexName" width="50" label="性别"></el-table-column>
        <el-table-column prop="birthday" width="100" label="出生日期"></el-table-column>
        <el-table-column prop="idCard" width="170" label="身份证号"></el-table-column>
        <el-table-column prop="telephone" width="110" label="手机号码"></el-table-column>
        <el-table-column prop="email" width="180" label="邮箱"></el-table-column>
        <el-table-column prop="unit" width="130" label="所在单位"></el-table-column>
        <el-table-column prop="position" width="130" label="职务"></el-table-column>
        <el-table-column prop="leaderAlternativeName" width="150" label="是否有督察组长资格"></el-table-column>
        <el-table-column prop="teamName" width="240" label="当前角色" :show-overflow-tooltip="true"></el-table-column>
        <el-table-column prop="inspectTimes" width="110" label="参与督察次数"></el-table-column>
        <el-table-column prop="stateName" width="110" label="是否在督察组"></el-table-column>
        <el-table-column label="操作" width="150" fixed="right">
          <template slot-scope="scope">
            <el-button size="mini" type="primary" @click="handleEdit(scope.row)">修改</el-button>
            <el-button size="mini" type="danger" @click="handleDelete(scope.row)">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
      <pagination
        v-show="total > 0"
        :total="total"
        :pageNo.sync="queryParams.pageNo"
        :limit.sync="queryParams.pageSize"
        @pagination="getList"
      />
    </div>
    <!-- 用户导入对话框 -->
    <el-dialog :title="upload.title" :visible.sync="upload.open" width="400px" append-to-body>
      <el-upload
        ref="upload"
        :limit="1"
        accept=".xlsx, .xls"
        :headers="upload.headers"
        :action="upload.url + '?updateSupport=' + upload.updateSupport"
        :disabled="upload.isUploading"
        :on-progress="handleFileUploadProgress"
        :on-success="handleFileSuccess"
        :auto-upload="false"
        drag
      >
        <i class="el-icon-upload"></i>
        <div class="el-upload__text">
          将文件拖到此处，或
          <em>点击上传</em>
        </div>
        <div class="el-upload__tip" slot="tip">
          <el-checkbox v-model="upload.updateSupport" />是否更新已经存在的用户数据
          <el-link
            type="info"
            style="font-size:12px;color:#red;font-weight:bold;"
            @click="importTemplate"
          >下载模板</el-link>
        </div>
        <div class="el-upload__tip" style="color:red" slot="tip">提示：仅允许导入“xls”或“xlsx”格式文件！</div>
      </el-upload>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submitFileForm">确 定</el-button>
        <el-button @click="upload.open = false">取 消</el-button>
      </div>
    </el-dialog>
    <el-dialog
      :title="dialogTitle"
      :visible.sync="open"
      width="80%"
      :before-close="handleDialogClose"
      append-to-body
      :close-on-click-modal="false"
    >
      <el-form
        ref="dialogForm"
        :model="dialogParams"
        :rules="dialogRules"
        label-width="80px"
        class="dialogForm twoLayoutForm"
      >
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="姓名：" prop="name">
              <el-input v-model="dialogParams.name" placeholder="请输入姓名"></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="性别：" prop="sex">
              <el-select v-model="dialogParams.sex" placeholder="请输入性别">
                <el-option label="男" value="1"></el-option>
                <el-option label="女" value="2"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="身份证号：" prop="idCard">
              <el-input v-model="dialogParams.idCard" placeholder="请输入身份证号"></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="出生日期：" prop="birthday">
              <el-date-picker
                v-model="dialogParams.birthday"
                format="yyyy-MM-d"
                value-format="yyyy-MM-dd"
                type="date"
                placeholder="选择出生日期"
              ></el-date-picker>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="手机号码：" prop="telephone">
              <el-input v-model="dialogParams.telephone" placeholder="请输入手机号码"></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="邮箱：" prop="email">
              <el-input v-model="dialogParams.email" placeholder="请输入邮箱"></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="所在单位：" prop="unit">
              <el-input
                v-model="dialogParams.unit"
                maxlength="20"
                show-word-limit
                placeholder="请输入所在单位"
              ></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="职务：" prop="position">
              <el-input
                v-model="dialogParams.position"
                maxlength="20"
                show-word-limit
                placeholder="请输入职务"
              ></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="所属地区：" prop="areaCode">
              <el-select v-model="dialogParams.areaCode" filterable placeholder="请选择所属地区">
                <el-option
                  v-for="item in areaArry"
                  :key="item.id"
                  :label="item.label"
                  :value="item.id"
                ></el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="所属机构：" prop="office">
              <treeselect
                v-model="dialogParams.office"
                :options="officeList"
                :disable-branch-nodes="true"
                :normalizer="normalizer"
                noChildrenText="无"
                placeholder="请选择所属机构"
              />
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="是否有督察组长资格：" prop="leaderAlternative">
              <el-select v-model="dialogParams.leaderAlternative" placeholder="是否有督察组长资格">
                <el-option label="是" value="1"></el-option>
                <el-option label="否" value="0"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="是否是督察成员：" prop="memberAlternative">
              <el-select v-model="dialogParams.memberAlternative" placeholder="是否是督察成员">
                <el-option label="是" value="1"></el-option>
                <el-option label="否" value="0"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
        <div class="dialogFormFooter">
          <el-button type="primary" @click="dailogSubmit">保存</el-button>
          <el-button type="primary" @click="handleDialogClose">关闭</el-button>
        </div>
      </el-form>
    </el-dialog>

    <el-dialog
      title="查看"
      :visible.sync="check"
      width="80%"
      :before-close="handleDialogCheckClose"
      append-to-body
    >
      <div class="dialogCheck">
        <el-row :gutter="24">
          <el-col :span="12">
            <label class="check-label">姓名：</label>
            <span class="check-text">{{ manageInfo.name }}</span>
          </el-col>
          <el-col :span="12">
            <label class="check-label">性别：</label>
            <span class="check-text">{{ manageInfo.sex }}</span>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <label class="check-label">身份证号：</label>
            <span class="check-text">{{ manageInfo.idCard }}</span>
          </el-col>
          <el-col :span="12">
            <label class="check-label">出生日期：</label>
            <span class="check-text">{{ manageInfo.birthday }}</span>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <label class="check-label">手机号码：</label>
            <span class="check-text">{{ manageInfo.telephone }}</span>
          </el-col>
          <el-col :span="12">
            <label class="check-label">邮箱：</label>
            <span class="check-text">{{ manageInfo.email }}</span>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <label class="check-label">所在单位：</label>
            <span class="check-text">{{ manageInfo.unit }}</span>
          </el-col>
          <el-col :span="12">
            <label class="check-label">职务：</label>
            <span class="check-text">{{ manageInfo.position }}</span>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <label class="check-label">所属地区：</label>
            <span class="check-text">{{ manageInfo.areaCode }}</span>
          </el-col>
          <el-col :span="12">
            <label class="check-label">所属机构：</label>
            <span class="check-text">{{ manageInfo.office }}</span>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <label class="check-label">是否有督察组长资格：</label>
            <span class="check-text">{{ manageInfo.leaderAlternative }}</span>
          </el-col>
          <el-col :span="12">
            <label class="check-label">是否是督察成员：</label>
            <span class="check-text">{{ manageInfo.memberAlternative }}</span>
          </el-col>
        </el-row>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import {
  personnelList,
  personnelDelete,
  personnelSave,
  personnelSee,
  personnelCheckData
} from "@/api/support/personnel";
import { officeTreeData } from "@/api/styem/dept";
import { getToken } from "@/utils/auth";
import { downLoadZip } from "@/utils/zipdownload";
import { mapGetters } from "vuex";
import { isPasword, isEmail, isMobile, isCard } from "@/utils/validate";
export default {
  props: {
    deptId: {
      type: String
    }
  },
  data() {
    return {
      showSearch: true,
      queryParams: {
        name: null,
        idCard: null,
        telephone: undefined,
        state: undefined,
        office: undefined,
        pageNo: 1,
        pageSize: 10
      },
      loading: true,
      List: [],
      total: 0,
      dialogTitle: "新增",
      open: false,
      dialogParams: {
        id: undefined,
        name: undefined,
        sex: undefined,
        idCard: undefined,
        birthday: undefined,
        telephone: undefined,
        email: undefined,
        unit: undefined,
        position: undefined,
        areaCode: undefined,
        office: undefined,
        leaderAlternative: undefined,
        memberAlternative: undefined
      },
      dialogRules: {
        name: [{ required: true, message: "请输入姓名" }],
        sex: [{ required: true, message: "请选择性别" }],
        idCard: [
          { required: true, message: "请输入身份证号" },
          { validator: this.verifyCard, trigger: "blur" }
        ],
        birthday: [{ required: true, message: "选择出生日期" }],
        telephone: [
          { required: true, message: "请输入手机号码" },
          { validator: this.verifyPhone, trigger: "blur" }
        ],
        email: [
          { required: true, message: "请输入邮箱" },
          { validator: this.verifyEmail, trigger: "blur" }
        ],
        unit: [{ required: true, message: "请输入所在单位" }],
        position: [{ required: true, message: "请输入职务" }],
        areaCode: [{ required: true, message: "请选择所属地区" }],
        office: [{ required: true, message: "请选择所属机构" }],
        leaderAlternative: [
          { required: true, message: "请选择是否有督察组长资格" }
        ],
        memberAlternative: [
          { required: true, message: "请选择是否是督察成员：" }
        ]
      },
      officeList: [],
      normalizer(node) {
        return {
          label: node.name
        };
      },
      manageInfo: {
        name: undefined,
        sex: undefined,
        idCard: undefined,
        birthday: undefined,
        telephone: undefined,
        email: undefined,
        unit: undefined,
        position: undefined,
        areaCode: undefined,
        office: undefined,
        leaderAlternative: undefined,
        memberAlternative: undefined
      },
      check: false,
      upload: {
        open: false,
        title: "",
        isUploading: false,
        updateSupport: 0,
        headers: { Authorization: getToken() },
        url:
          process.env.VUE_APP_BASE_API +
          "/center/tcommon/member/tCommonMember/import"
      },
      editIdCard: undefined,
      editTelephone: undefined,
      editEmail: undefined
    };
  },
  created() {
    this.getList();
    this.getOfficeTree();
  },
  computed: {
    ...mapGetters(["areaArry"])
  },
  watch: {
    deptId(newValue) {
      this.queryParams.office = newValue;
      this.getList();
    }
  },
  methods: {
    async getList() {
      this.loading = true;
      const reponse = await personnelList(this.queryParams);
      reponse.data.list &&
        reponse.data.list.map(item => {
          item["sexName"] = item.sex == 1 ? "男" : "女";
          item["leaderAlternativeName"] =
            item.leaderAlternative == 1 ? "是" : "否";
          item["stateName"] = item.state == 0 ? "否" : "是";
        });
      this.List = reponse.data.list;
      this.total = reponse.data.count;
      this.loading = false;
    },
    async getOfficeTree() {
      const reponse = await officeTreeData({ type: 2, isAll: true });
      const menu = this.handleTree(reponse.data, "id", "pId", "children", "0");
      this.officeList = menu;
    },
    onQuery() {
      this.queryParams.pageNo = 1;
      this.getList();
    },
    onClear() {
      this.queryParams.name = undefined;
      this.queryParams.idCard = undefined;
      this.queryParams.telephone = undefined;
      this.queryParams.state = undefined;
      this.queryParams.office = undefined;
    },
    handleNewly() {
      this.open = true;
      this.dialogParams.id = undefined;
      this.dialogTitle = "新增";
    },
    dailogSubmit() {
      this.$refs.dialogForm.validate(async valid => {
        if (valid) {
          const reponse = await personnelSave(this.dialogParams);
          this.open = false;
          this.handleDialogClose();
          this.getList();
        }
      });
    },
    handleDialogClose() {
      this.open = false;
      this.handleformClear("dialogForm");
      this.editIdCard = undefined;
      this.editTelephone = undefined;
      this.editEmail = undefined;
      this.dialogRules.idCard[1] = {
        validator: this.verifyCard,
        trigger: "blur"
      };
      this.dialogRules.telephone[1] = {
        validator: this.verifyPhone,
        trigger: "blur"
      };
      this.dialogRules.email[1] = {
        validator: this.verifyEmail,
        trigger: "blur"
      };
    },
    verifyCard(rule, value, callback) {
      if (!isCard(value)) {
        callback(new Error("请输入正确身份证号"));
      } else {
        personnelCheckData({ type: 3, value }).then(reponse => {
          if (reponse.data === false) {
            callback(new Error("身份证号已存在"));
          } else {
            callback();
          }
        });
      }
    },
    verifyPhone(rule, value, callback) {
      if (!isMobile(value)) {
        callback(new Error("请输入正确手机号"));
      } else {
        personnelCheckData({ type: 2, value }).then(reponse => {
          if (reponse.data === false) {
            callback(new Error("手机号已存在"));
          } else {
            callback();
          }
        });
      }
    },
    verifyEmail(rule, value, callback) {
      if (!isEmail(value)) {
        callback(new Error("请输入正确邮箱"));
      } else {
        personnelCheckData({ type: 1, value }).then(reponse => {
          if (reponse.data === false) {
            callback(new Error("邮箱已存在"));
          } else {
            callback();
          }
        });
      }
    },
    async handleEdit(data) {
      console.log(data);
      const { id, idCard, telephone, email } = data;
      this.editIdCard = idCard;
      this.editTelephone = telephone;
      this.editEmail = email;
      this.dialogTitle = "修改";
      this.open = true;
      this.getDialogInfo(id);
      this.dialogRules.idCard[1] = {
        validator: this.verifyEditCard,
        trigger: "blur"
      };
      this.dialogRules.telephone[1] = {
        validator: this.verifyEditPhone,
        trigger: "blur"
      };
      this.dialogRules.email[1] = {
        validator: this.verifyEditEmail,
        trigger: "blur"
      };
    },
    verifyEditCard(rule, value, callback) {
      if (!isCard(value)) {
        callback(new Error("请输入正确身份证号"));
      } else if (this.editIdCard == value) {
        callback();
      } else {
        personnelCheckData({ type: 3, value }).then(reponse => {
          if (reponse.data === false) {
            callback(new Error("身份证号已存在"));
          } else {
            callback();
          }
        });
      }
    },
    verifyEditPhone(rule, value, callback) {
      if (!isMobile(value)) {
        callback(new Error("请输入正确手机号"));
      } else if (this.editTelephone == value) {
        callback();
      } else {
        personnelCheckData({ type: 2, value }).then(reponse => {
          if (reponse.data === false) {
            callback(new Error("手机号已存在"));
          } else {
            callback();
          }
        });
      }
    },
    verifyEditEmail(rule, value, callback) {
      if (!isEmail(value)) {
        callback(new Error("请输入正确邮箱"));
      } else if (this.editEmail == value) {
        callback();
      } else {
        personnelCheckData({ type: 1, value }).then(reponse => {
          if (reponse.data === false) {
            callback(new Error("邮箱已存在"));
          } else {
            callback();
          }
        });
      }
    },
    handleDelete(data) {
      this.$confirm("是否要删除", "确认信息", {
        distinguishCancelAndClose: true,
        confirmButtonText: "删除",
        cancelButtonText: "取消"
      }).then(async () => {
        const { id } = data;
        const reponse = await personnelDelete({ id });
        this.getList();
      });
    },
    async getDialogInfo(id) {
      const reponse = await personnelSee({ id });
      const subject = reponse.data;
      this.dialogParams.id = subject.id;
      this.dialogParams.name = subject.name;
      this.dialogParams.sex = subject.sex;
      this.dialogParams.idCard = subject.idCard;
      this.dialogParams.birthday = subject.birthday;
      this.dialogParams.telephone = subject.telephone;
      this.dialogParams.email = subject.email;
      this.dialogParams.unit = subject.unit;
      this.dialogParams.position = subject.position;
      this.dialogParams.areaCode = subject.areaCode;
      this.dialogParams.office = subject.office;
      this.dialogParams.leaderAlternative = subject.leaderAlternative;
      this.dialogParams.memberAlternative = subject.memberAlternative;
    },
    async handleSee({ id }) {
      this.check = true;
      this.getDetailInfo(id);
    },
    async getDetailInfo(id) {
      const reponse = await personnelSee({ id });
      const subject = reponse.data;
      this.manageInfo.name = subject.name;
      this.manageInfo.sex = subject.sex == 1 ? "男" : "女";
      this.manageInfo.idCard = subject.idCard;
      this.manageInfo.birthday = subject.birthday;
      this.manageInfo.telephone = subject.telephone;
      this.manageInfo.email = subject.email;
      this.manageInfo.unit = subject.unit;
      this.manageInfo.position = subject.position;
      this.manageInfo.areaCode = subject.areaName;
      this.manageInfo.office = subject.officeName;
      this.manageInfo.leaderAlternative =
        subject.leaderAlternative == 1 ? "是" : "否";
      this.manageInfo.memberAlternative =
        subject.memberAlternative == 1 ? "是" : "否";
    },
    handleformClear(refName) {
      this.resetFieldsTap(refName);
    },
    handleDialogCheckClose() {
      this.check = false;
      this.handleCheckClear();
    },
    handleCheckClear() {
      this.dialogParams.name = undefined;
      this.dialogParams.sex = undefined;
      this.dialogParams.idCard = undefined;
      this.dialogParams.birthday = undefined;
      this.dialogParams.telephone = undefined;
      this.dialogParams.email = undefined;
      this.dialogParams.unit = undefined;
      this.dialogParams.position = undefined;
      this.dialogParams.areaCode = undefined;
      this.dialogParams.office = undefined;
      this.dialogParams.leaderAlternative = undefined;
      this.dialogParams.memberAlternative = undefined;
    },
    /** 导出按钮操作 */
    handleExport() {
      const queryParams = this.queryParams;
      this.$confirm("是否确认导出所有用户数据项?", "警告", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(function() {
        downLoadZip("/center/tcommon/member/tCommonMember/export", queryParams);
      });
    },
    /** 导入按钮操作 */
    handleImport() {
      this.upload.title = "用户导入";
      this.upload.open = true;
    },
    /** 下载模板操作 */
    importTemplate() {
      downLoadZip("/center/tcommon/member/tCommonMember/import/template");
    },
    // 文件上传中处理
    handleFileUploadProgress(event, file, fileList) {
      this.upload.isUploading = true;
    },
    // 文件上传成功处理
    handleFileSuccess(response, file, fileList) {
      this.upload.open = false;
      this.upload.isUploading = false;
      this.$refs.upload.clearFiles();
      this.$alert(response.msg, "导入结果", { dangerouslyUseHTMLString: true });
      this.getList();
    },
    // 提交上传文件
    submitFileForm() {
      this.$refs.upload.submit();
    }
  }
};
</script>

<style lang="scss" scoped>
/deep/.el-form-item__content {
  justify-content: flex-end;
}
/deep/.el-link--inner {
  font-weight: bold;
  color: red;
}
/deep/.vue-treeselect__menu {
  max-height: 220px !important;
}
</style>
