<template>
  <div>
    <!-- :teamId.sync="queryParams.teamId" -->
    <national-info
      :areaCode.sync="queryParams.inspectAreaCode"
      :areaName.sync="queryParams.inspectAreaName"
      @nameChange="getList"
    ></national-info>
    <div class="box-body" v-show="showSearch">
      <el-form :model="queryParams" label-width="120px">
        <el-row>
          <el-col :span="8">
            <el-form-item label="污染类型：">
              <el-select v-model="queryParams.pollutionLevelOne" placeholder="请选择污染类型">
                <el-option
                  v-for="item in pollutantArry"
                  :key="item.id"
                  :label="item.label"
                  :value="item.value"
                ></el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="举报地址：" class="meet-address" prop="address">
              <el-select
                v-model="queryParams.cityCode"
                filterable
                placeholder="请选择市"
                @change="handleCityChange"
              >
                <el-option
                  v-for="item in areaArry"
                  :key="item.id"
                  :label="item.label"
                  :value="item.id"
                ></el-option>
              </el-select>
              <el-select
                v-model="queryParams.countyCode"
                @change="handleCountyChange"
                filterable
                placeholder="请选择区县"
              >
                <el-option
                  v-for="item in countyArry"
                  :key="item.id"
                  :label="item.label"
                  :value="item.id"
                ></el-option>
              </el-select>
              <el-select v-model="queryParams.townCode" filterable placeholder="请选择镇">
                <el-option
                  v-for="item in townArry"
                  :key="item.id"
                  :label="item.label"
                  :value="item.id"
                ></el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-form-item class="pull-right">
            <el-button type="primary" @click="onQuery">查询</el-button>
            <el-button type="primary" @click="onClear">清空</el-button>
          </el-form-item>
        </el-row>
      </el-form>
    </div>
    <el-row :gutter="10" class="mb8">
      <div v-if="buttonAuthority" style="display:inline-block;">
        <el-button size="small" @click="handleMergeClick" type="primary">一键合并</el-button>
        <el-button size="small" @click="handleCancelClick" type="danger">一键取消</el-button>
      </div>
      <right-toolbar :showSearch.sync="showSearch" @queryTable="getList"></right-toolbar>
    </el-row>
    <el-table
      v-loading="loading"
      :data="List"
      row-key="id"
      border
      default-expand-all
      :tree-props="{children: 'children', hasChildren: 'hasChildren'}"
      :stripe="true"
    >
      <el-table-column
        prop="tipNumber"
        label="举报编号"
        :show-overflow-tooltip="true"
        width="180px"
        class="column-left"
      ></el-table-column>
      <el-table-column label="举报地址" :show-overflow-tooltip="true" width="180px">
        <template
          slot-scope="scope"
        >{{ scope.row.cityName }}{{ scope.row.countyName }}{{ scope.row.address }}</template>
      </el-table-column>
      <el-table-column
        prop="tipOffContent"
        min-width="200px"
        :show-overflow-tooltip="true"
        label="举报主要内容"
      ></el-table-column>
      <el-table-column
        prop="pollutionType"
        label="污染类型"
        :show-overflow-tooltip="true"
        width="120px"
      ></el-table-column>
      <el-table-column prop="tipBy" label="举报人" width="100px" :show-overflow-tooltip="true"></el-table-column>
      <el-table-column prop="tipTime" label="举报时间" width="120px" :show-overflow-tooltip="true"></el-table-column>
      <el-table-column prop="repeatFlagName" label="重复状态" width="120px"></el-table-column>
      <el-table-column
        prop="silimarityData"
        :show-overflow-tooltip="true"
        label="重复相似度"
        width="300px"
      ></el-table-column>
      <el-table-column prop="handleStateName" label="状态" width="80px"></el-table-column>
      <el-table-column label="操作" width="180" fixed="right">
        <template slot-scope="scope" v-if="buttonAuthority">
          <div v-if="scope.row.repeatId&&scope.row.repeatFlag==3">
            <el-button size="mini" type="primary" @click="handleCancelOne(scope.row)">取消合并</el-button>
          </div>
          <div v-else>
            <div v-if="scope.row.repeatFlag==3">
              <el-button size="mini" type="primary" @click="handleDuplicate(scope.row)">补充重复件</el-button>
              <el-button size="mini" type="primary" @click="handleCombineOne(scope.row)">合并</el-button>
            </div>
            <el-button
              size="mini"
              v-if="scope.row.repeatFlag!=3&&scope.row.repeatId==undefined"
              type="danger"
              @click="handleCancelDuplicate(scope.row)"
            >取消重复</el-button>
          </div>
        </template>
      </el-table-column>
    </el-table>
    <pagination
      v-show="total > 0"
      :total="total"
      :pageNo.sync="queryParams.pageNo"
      :limit.sync="queryParams.pageSize"
      @pagination="getList"
    />
    <el-dialog
      title="补充重复"
      :visible.sync="duplicateOpen"
      width="80%"
      :before-close="handleDialogClose"
      append-to-body
      :close-on-click-modal="false"
      class="information-inner"
    >
      <div class="box-body">
        <el-form :model="queryLogParams" label-width="100px">
          <el-row>
            <el-col :span="8">
              <el-form-item label="举报内容：">
                <el-input v-model="queryLogParams.tipOffContent" placeholder="请输入举报内容"></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="举报人：">
                <el-input v-model="queryLogParams.tipBy" placeholder="请输入举报人"></el-input>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="8">
              <el-form-item label="举报电话：">
                <el-input v-model="queryLogParams.reporterPhone" placeholder="请输入举报电话"></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="举报地址：">
                <el-input v-model="queryLogParams.address" placeholder="请输入举报地址"></el-input>
              </el-form-item>
            </el-col>
            <el-form-item class="pull-right marginLeft0">
              <el-button type="primary" @click="onDialogQuery">查询</el-button>
              <el-button type="primary" @click="onDialogClear">清空</el-button>
            </el-form-item>
          </el-row>
        </el-form>
      </div>
      <el-table :data="logList" border :stripe="true" v-loading="logLoading" style="width: 100%">
        <el-table-column width="50" label="序号">
          <template scope="scope">
            <span>{{scope.$index + 1}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="tipNumber" label="举报编号" width="140px"></el-table-column>
        <el-table-column prop="reporterPhone" label="举报电话" width="120px"></el-table-column>
        <el-table-column prop="tipTime" label="举报时间" width="120px"></el-table-column>
        <el-table-column
          prop="tipOffContent"
          label="举报主要内容"
          :show-overflow-tooltip="true"
          min-width="200px"
          class="column-left"
        ></el-table-column>
        <el-table-column
          prop="pollutionType"
          label="污染类型"
          width="120px"
          :show-overflow-tooltip="true"
        ></el-table-column>
        <el-table-column label="举报地址" :show-overflow-tooltip="true" width="180px">
          <template
            slot-scope="scope"
          >{{ scope.row.cityName }}{{ scope.row.countyName }}{{ scope.row.address }}</template>
        </el-table-column>
        <el-table-column label="相似度" width="100px" :show-overflow-tooltip="true">
          <template slot-scope="scope">{{ scope.row.silimarityData }}%</template>
        </el-table-column>
        <el-table-column label="操作" width="120px" fixed="right">
          <!-- 1取消重复 0补充重复 -->
          <template v-slot="scope">
            <el-button
              v-if="scope.row.repeatTableRepeatFlag==0"
              size="mini"
              type="primary"
              @click="handleAddRepeat(scope.row)"
            >补充重复</el-button>
            <el-button size="mini" type="danger " v-else @click="handleRemoveRepeat(scope.row)">取消重复</el-button>
          </template>
        </el-table-column>
      </el-table>
      <!-- <div class="dialogFormFooter">
        <el-button type="primary" @click="handleAddRepeatClick">添加重复</el-button>
        <el-button type="primary" @click="handleDialogClose">关闭</el-button>
      </div>-->
    </el-dialog>
  </div>
</template>

<script>
import {
  intelList,
  repeatList,
  intelAdd,
  intelRemove,
  intelCombineOne,
  intelCancelOne,
  intelCombineAll,
  intelCancelAll,
  intelRecheckingList,
  manuallyMerge
} from "@/api/burg/garrison";
import { inspectorRoundList } from "@/api/support/inspectorate";
import { dictListType } from "@/api/styem/dict/type";
import { areaTreeNew } from "@/api/styem/dept";
import nationalInfo from "@/components/nationalInfo";
import { mapGetters } from "vuex";
export default {
  components: {
    nationalInfo
  },
  data() {
    return {
      showSearch: true,
      queryParams: {
        pageNo: 1,
        pageSize: 10,
        teamId: undefined,
        inspectType: undefined,
        inspectTurnId: undefined,
        inspectBatchId: undefined,
        cityCode: undefined,
        countyCode: undefined,
        townCode: undefined,
        pollutionLevelOne: undefined
      },
      List: [],
      total: 0,
      loading: true,
      open: false,
      roundArry: [],
      batchArry: [],
      pollutantArry: [],
      countyArry: [],
      townArry: [],
      buttonAuthority: true,
      duplicateOpen: false,
      queryLogParams: {
        mainId: undefined,
        tipOffContent: undefined,
        tipBy: undefined,
        reporterPhone: undefined,
        address: undefined
      },
      logList: [],
      logLoading: true,
      multipleSelection: []
    };
  },
  created() {
    if (this.inspectInfo.suite) {
      this.buttonAuthority = true;
    } else {
      this.buttonAuthority = false;
      const superviseSubject = JSON.parse(
        sessionStorage.getItem("superviseItem")
      );
      this.queryParams.inspectType = superviseSubject.code;
      this.queryParams.inspectTurnId = superviseSubject.roundId;
      this.queryParams.inspectBatchId = superviseSubject.batchId;
    }
    this.getList();
    this.getDictPollutant();
  },
  computed: {
    ...mapGetters(["inspectInfo", "userInfo", "areaArry"])
  },
  methods: {
    async getList() {
      this.loading = true;
      const reponse = await intelList(this.queryParams);
      this.List = reponse.data.list;
      this.total = reponse.data.count;
      this.loading = false;
    },
    async getDictPollutant() {
      const reponse = await dictListType({ type: "clue_pollution_type" });
      this.pollutantArry = reponse.data;
    },
    async handleCityChange(code) {
      this.countyArry = [];
      this.queryParams.countyCode = undefined;
      this.townArry = [];
      this.queryParams.townCode = undefined;
      const reponse = await areaTreeNew({ parentId: code });
      this.countyArry = reponse.data;
    },
    async handleCountyChange(code) {
      this.townArry = [];
      this.queryParams.townCode = undefined;
      const reponse = await areaTreeNew({ parentId: code });
      this.townArry = reponse.data;
    },
    onQuery() {
      this.getList();
      this.queryParams.pageNo = 1;
    },
    onClear() {
      this.queryParams.pollutionLevelOne = undefined;
      this.queryParams.cityCode = undefined;
      this.queryParams.countyCode = undefined;
      this.queryParams.townCode = undefined;
    },
    async getRepeatList() {
      this.logLoading = true;
      const reponse = await repeatList(this.queryLogParams);
      reponse.data &&
        reponse.data.map(item => {
          item["silimarityData"] = Number(item.silimarityData).toFixed(2)*100;
        });
      this.logList = reponse.data;
      this.logLoading = false;
    },
    onDialogQuery() {
      this.getRepeatList();
    },
    onDialogClear() {
      this.queryLogParams.tipOffContent = undefined;
      this.queryLogParams.tipBy = undefined;
      this.queryLogParams.reporterPhone = undefined;
      this.queryLogParams.address = undefined;
    },
    handleMergeClick() {
      this.$confirm(`是否要一键合并`, "确认信息", {
        distinguishCancelAndClose: true,
        confirmButtonText: "确定",
        cancelButtonText: "取消"
      }).then(async () => {
        const reponse = await intelCombineAll();
        this.getList();
      });
    },
    handleCancelClick() {
      this.$confirm(`是否要一键取消`, "确认信息", {
        distinguishCancelAndClose: true,
        confirmButtonText: "确定",
        cancelButtonText: "取消"
      }).then(async () => {
        const reponse = await intelCancelAll();
        this.getList();
      });
    },
    async handleCancelOne(data) {
      const { id } = data;
      this.$confirm(`是否要取消合并`, "确认信息", {
        distinguishCancelAndClose: true,
        confirmButtonText: "确定",
        cancelButtonText: "取消"
      }).then(async () => {
        const reponse = await intelCancelOne({ id });
        if (reponse.code == 200) {
          this.$message({
            message: "取消合并成功",
            type: "success"
          });
          this.getList();
        }
      });
    },
    handleDuplicate(data) {
      const { id } = data;
      this.duplicateOpen = true;
      this.queryLogParams.mainId = id;
      this.getRepeatList();
    },
    handleCombineOne(data) {
      const { id } = data;
      this.$confirm(`是否要合并`, "确认信息", {
        distinguishCancelAndClose: true,
        confirmButtonText: "确定",
        cancelButtonText: "取消"
      }).then(async () => {
        const reponse = await intelCombineOne({ mainId: id });
        if (reponse.code == 200) {
          this.$message({
            message: "合并成功",
            type: "success"
          });
          this.getList();
        }
      });
    },
    handleCancelDuplicate(data) {
      const { parentTipId, id } = data;
      this.$confirm(`是否要取消重复`, "确认信息", {
        distinguishCancelAndClose: true,
        confirmButtonText: "确定",
        cancelButtonText: "取消"
      }).then(async () => {
        const reponse = await intelRemove({ mainId: parentTipId, cId: id });
        if (reponse.code == 200) {
          this.$message({
            message: "取消重复件成功",
            type: "success"
          });
          this.getList();
        }
      });
    },
    handleAddRepeat(data) {
      const { id } = data;
      this.$confirm(`是否要补充重复`, "确认信息", {
        distinguishCancelAndClose: true,
        confirmButtonText: "确定",
        cancelButtonText: "取消"
      }).then(async () => {
        const mainId = this.queryLogParams.mainId;
        const reponse = await intelAdd({ mainId, cId: id });
        if (reponse.code == 200) {
          this.$message({
            message: "补充重复件成功",
            type: "success"
          });
          this.getRepeatList();
        }
      });
    },
    handleRemoveRepeat(data) {
      const { id } = data;
      this.$confirm(`是否要取消重复`, "确认信息", {
        distinguishCancelAndClose: true,
        confirmButtonText: "确定",
        cancelButtonText: "取消"
      }).then(async () => {
        const mainId = this.queryLogParams.mainId;
        const reponse = await intelRemove({ mainId, cId: id });
        if (reponse.code == 200) {
          this.$message({
            message: "取消重复件成功",
            type: "success"
          });
          this.getRepeatList();
        }
      });
    },
    handleDialogClose() {
      this.duplicateOpen = false;
      this.queryLogParams.mainId = undefined;
      this.getList();
    }
  }
};
</script>
<style lang="scss" scoped>
.twoLayoutForm {
  .meet-address {
    .el-form-item__content {
      .el-select {
        width: 19%;
      }
      .el-input {
        width: 62%;
      }
    }
  }
}
.pull-right {
  /deep/.el-form-item__content {
    margin-left: 0 !important;
  }
}
.dialogFormFooter {
  text-align: center;
  margin-top: 20px;
}
</style>