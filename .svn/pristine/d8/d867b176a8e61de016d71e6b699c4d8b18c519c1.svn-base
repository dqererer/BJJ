<template>
  <div class="zh-search">
    <div class="search-wrap">
      <el-input
        placeholder="请输入内容"
        v-model="keyword"
        class="input-with-select"
      >
        <el-select v-model="filter" slot="prepend" placeholder="请选择">
          <el-option
            v-for="item in filters"
            :key="item.value"
            :label="item.label"
            :value="item.value"
          >
          </el-option>
        </el-select>

        <el-button
          slot="append"
          icon="el-icon-search"
          @click="goSearch"
        ></el-button>
      </el-input>
    </div>
    <div class="result">
      <div class="top" v-if="showResultTypeData">
        <el-radio-group v-model="resultType" style="margin-bottom: 30px">
          <el-radio-button
            v-for="(value, key) in resultTypeData"
            v-bind:key="key"
            :label="key"
            >{{ key }}（{{ value[0].count }}）</el-radio-button
          >
        </el-radio-group>
      </div>
      <div class="ul">
        <div
          class="li"
          v-for="item in curList"
          v-bind:key="item.id"
          @click="jump(item.id)"
        >
          <div class="title" v-html="item.name"></div>
          <div class="content" v-html="item.content"></div>
        </div>
      </div>
      <pagination
        v-show="total > 0"
        :total="total"
        :pageNo.sync="pageNo"
        :limit.sync="pageSize"
        @pagination="goSearch"
      />
    </div>
    <div v-if="showNoneMsg">meiyyoushuj</div>
  </div>
</template>

<script>
import { getAllSearchData } from "@/api/support/search";
import { dictListType } from "@/api/styem/dict/type";
export default {
  data() {
    return {
      filter: "all",
      filters: [
        {
          label: "全部",
          value: "all",
        },
      ],
      keyword: "",
      checkList: [],
      filterType: [],
      searchWord: "",
      pageNo: 1,
      pageSize: 10,
      tabList: [],
      resultType: "资料附件",
      resultTypeData: {},
      curList: [],
      total: 0,
      showResultTypeData: false,
      showNoneMsg: false,
    };
  },
  computed: {
    types: function () {
      if (this.filter == "all") {
        let arr = this.filterType.map((i) => {
          return i.value;
        });
        return arr.join(",");
      } else {
        return this.filter;
      }
    },
  },
  watch: {
    resultType: function (newV) {
      this.resultType = newV;
      this.curList = this.resultTypeData[newV][0].list;
      this.total = this.resultTypeData[newV][0].count;
      this.pageNo = 1;
      this.goSearch();
    },
  },
  created() {
    this.getFilterType();
  },
  methods: {
    jump: function (id) {
      let path = "";
      switch (this.resultType) {
        case "整改方案":
          //;
          break;
        case "人员":
          path = "/people";
          break;
        case "督查组":
          path = "/duchazu";
          break;
        default:
          //
          break;
      }
      let routeData = this.$router.resolve({ path, query: { id } });
      window.open(routeData.href, "_blank");
    },
    getFilterType: function () {
      dictListType({
        type: "es_env",
      })
        .then((res) => {
          this.filters = this.filters.concat(res.data);
          this.filterType = res.data;
        })
        .catch();
    },
    goSearch: function () {
      getAllSearchData({
        pageNo: this.pageNo,
        pageSize: this.pageSize,
        types: this.types,
        searchWord: this.keyword,
      }).then((res) => {
        debugger;
        for (let i in res.data) {
          if (res.data[i][0].count == 0) {
            delete res.data[i];
          }
        }
        let arr = Object.keys(res.data);
        this.resultTypeData = res.data;
        if (arr.length > 0) {
          if (arr.indexOf(this.resultType) < 0) {
            this.resultType = arr[0];
          }
          if (this.filter == "all") {
            this.showResultTypeData = true;
          }
          this.curList = this.resultTypeData[this.resultType][0].list;
          this.total = this.resultTypeData[this.resultType][0].count;
        } else {
          this.showNoneMsg = true;
        }
      });
    },
  },
};
</script>

<style lang="scss" scoped>
.zh-search {
  width: 100%;
  .search-wrap {
    width: 400px;
    margin: 0 auto;
    padding: 30px 0 10px;
    .el-select {
      width: 100px;
    }
  }
  .filter {
    display: flex;
    justify-content: center;
    margin-bottom: 30px;
    .el-checkbox-group {
      display: inline-block;
    }
  }
  .li {
    padding: 20px;
    border-bottom: 1px solid #9e9e9e2b;
    color: #3e3c3c;

    .title {
      font-weight: bold;
      padding-bottom: 10px;
      cursor: pointer;
    }
    .content {
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-box-orient: vertical;
      -webkit-line-clamp: 3;
      cursor: pointer;

      font-size: 14px;
    }
  }
}
</style>


