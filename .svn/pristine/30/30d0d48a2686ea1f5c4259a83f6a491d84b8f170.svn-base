<template>
  <div class="information-inner information-change">
    <h1 class="information-title active">月度报告</h1>
    <div class="tab-list-content">
      <div class="box-body" v-show="showSearch">
        <el-form :model="queryParams" label-width="120px">
          <el-row>
            <el-col :span="8">
              <el-form-item label="督察级别 ：">
                <el-select
                  placeholder="请选择督察级别"
                  @change="changeSuperviseLevel(1)"
                  v-model="queryParams.levelType"
                >
                  <el-option
                    v-for="item in superviseLevelArry"
                    :key="item.id"
                    :label="item.name"
                    :value="item.value"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="督察类型 ：">
                <el-select
                  v-model="queryParams.inspectType"
                  placeholder="请选择督察类型"
                  @change="changeSuperviseType(1)"
                >
                  <el-option
                    v-for="item in superviseTypeArry"
                    :key="item.id"
                    :label="item.name"
                    :value="item.value"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="督察轮次：">
                <el-select
                  v-model="queryParams.roundId"
                  placeholder="请选择督察轮次"
                  @change="changeSuperviseRound(1)"
                >
                  <el-option
                    v-for="item in superviseRoundArry"
                    :key="item.id"
                    :label="item.batchName"
                    :value="item.batchId"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="8">
              <el-form-item label="督察批次：">
                <el-select
                  v-model="queryParams.batchId"
                  placeholder="请选择督察批次"
                >
                  <el-option
                    v-for="item in superviseBatchArry"
                    :key="item.id"
                    :label="item.batchName"
                    :value="item.batchId"
                  >
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="方案名称：">
                <el-input
                  v-model="queryParams.schemeName"
                  placeholder="请输入方案名称："
                ></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item class="pull-right">
                <el-button type="primary" @click="onQuery">查询</el-button>
                <el-button type="primary" @click="onClear">清空</el-button>
              </el-form-item>
            </el-col>
          </el-row>
        </el-form>
      </div>
      <el-row :gutter="10" class="mb8">
        <right-toolbar
          :showSearch.sync="showSearch"
          @queryTable="getReportList"
        ></right-toolbar>
      </el-row>
      <el-table v-loading="loading" :data="List" border :stripe="true">
        <el-table-column width="50" label="序号">
          <template scope="scope">
            <span>{{
              (queryParams.pageNo - 1) * queryParams.pageSize + scope.$index + 1
            }}</span>
          </template></el-table-column
        >
        <el-table-column prop="title" label="督察类型" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.inspectTypeName }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="title" label="督察轮次、批次" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.roundName }}、{{ scope.row.batchName }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="title" label="督察地区" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.cityName }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="title" label="方案名称" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.schemeName }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="title" label="月份" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.month }}</span>
          </template>
        </el-table-column>
        <el-table-column prop="fileReport" label="报告预览" width="160px"
          ><template v-slot="scope">
            <span
              class="accounChunk"
              @click="handlePreviewClick(scope.row.fileReport)"
              >{{ scope.row.fileReportName }}</span
            >
          </template>
        </el-table-column>
        <el-table-column label="操作" width="250">
          <template v-slot="scope">
            <el-button size="mini" @click="handleSee(scope.row)"
              >查看</el-button
            >
            <el-button size="mini" type="primary" @click="handleEdit(scope.row)"
              >修改</el-button
            >
            <el-button
              size="mini"
              type="danger"
              @click="handleDelete(scope.row.id)"
              >删除</el-button
            >
          </template>
        </el-table-column>
      </el-table>
      <pagination
        v-show="total > 0"
        :total="total"
        :pageNo.sync="queryParams.pageNo"
        :limit.sync="queryParams.pageSize"
        @pagination="getReportList"
      />
    </div>
    <el-dialog
      :title="dialogTitle"
      :visible="true"
      v-if="open"
      width="80%"
      :before-close="handleDialogClose"
      append-to-body
    >
      <el-form
        ref="dialogForm"
        :model="dialogParams"
        :rules="dialogRules"
        label-width="80px"
        class="dialogForm twoLayoutForm"
      >
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="督察级别：">
              <el-select
                placeholder="请选择督察级别"
                @change="changeSuperviseLevel(2)"
                v-model="dialogParams.levelType"
                disabled
              >
                <el-option
                  v-for="item in superviseLevelArry"
                  :key="item.id"
                  :label="item.name"
                  :value="item.value"
                >
                </el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="督察类型：">
              <el-select
                v-model="dialogParams.inspectType"
                placeholder="请选择督察类型"
                @change="changeSuperviseType(2)"
                disabled
              >
                <el-option
                  v-for="item in superviseTypeArry2"
                  :key="item.id"
                  :label="item.name"
                  :value="item.value"
                >
                </el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="督察轮次：">
              <el-select
                v-model="dialogParams.roundId"
                placeholder="请选择督察轮次"
                @change="changeSuperviseRound(2)"
                disabled
              >
                <el-option
                  v-for="item in superviseRoundArry2"
                  :key="item.id"
                  :label="item.batchName"
                  :value="item.batchId"
                >
                </el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="督察批次：">
              <el-select
                v-model="dialogParams.batchId"
                placeholder="请选择督察批次"
                disabled
              >
                <el-option
                  v-for="item in superviseBatchArry2"
                  :key="item.id"
                  :label="item.batchName"
                  :value="item.batchId"
                >
                </el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="督察地区：">
              <el-input
                class="inputWidth"
                v-model="dialogParams.cityName"
                disabled
              ></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="方案名称：">
              <el-input
                class="inputWidth"
                v-model="dialogParams.schemeName"
                placeholder="请输入反馈意见标题"
                disabled
              ></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="月份：">
              <el-date-picker
                v-model="dialogParams.month"
                format="yyyy-MM"
                value-format="yyyy-MM"
                type="date"
                disabled
              >
              </el-date-picker>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="报告附件：" prop="fileReport">
              <upload
                ref="uploadFile0"
                :limit="1"
                :fileId="dialogParams.fileReport"
                fromKey="fileReport"
                @setUrlPath="setUrlPath"
                @deleteServeFile="deleteServeFile"
              ></upload>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="盖章版报告：" prop="fileSupervise">
              <upload
                ref="uploadFile1"
                :limit="1"
                :fileId="dialogParams.fileSupervise"
                fromKey="fileSupervise"
                @setUrlPath="setUrlPath"
                @deleteServeFile="deleteServeFile"
              ></upload>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="24">
            <el-form-item label="报告内容：" prop="schemeName">
              <el-input
                class="inputWidth"
                v-model="dialogParams.content"
                type="textarea"
                placeholder="请输入方案名称"
              ></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <div class="dialogFormFooter">
          <el-button type="primary" @click="dailogSubmit">保存</el-button>
          <el-button type="primary" @click="handleDialogClose">关闭</el-button>
        </div>
      </el-form>
    </el-dialog>

    <el-dialog
      title="查看"
      :visible.sync="check"
      width="80%"
      :before-close="handleDialogCheckClose"
      append-to-body
    >
      <div class="dialogCheck">
        <el-row :gutter="24">
          <el-col :span="12">
            <label class="check-label">督察级别：</label>
            <span class="check-text">{{ dialogParams.levelTypeName }}</span>
          </el-col>
          <el-col :span="12">
            <label class="check-label">督察类型：</label>
            <span class="check-text">{{ dialogParams.inspectTypeName }}</span>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <label class="check-label">督察轮次：</label>
            <span class="check-text">{{ dialogParams.roundName }}</span>
          </el-col>
          <el-col :span="12">
            <label class="check-label">督察批次：</label>
            <span class="check-text">{{ dialogParams.batchName }}</span>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <label class="check-label">督察地区：</label>
            <span class="check-text">{{ dialogParams.cityName }}</span>
          </el-col>
          <el-col :span="12">
            <label class="check-label">方案名称：</label>
            <span class="check-text">{{ dialogParams.schemeName }}</span>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <label class="check-label">月份：</label>
            <span class="check-text">{{ dialogParams.month }}</span>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <label class="check-label">报告附件：</label>
            <span
              class="check-text accounChunk"
              @click="handlePreviewClick(dialogParams.fileReport)"
              >{{ dialogParams.fileReportName }}</span
            >
          </el-col>
          <el-col :span="12">
            <label class="check-label">盖章版报告：</label>
            <span
              class="check-text accounChunk"
              @click="
                handlePreviewClick(dialogParams.fileReport)
              "
              >{{ dialogParams.fileReportName }}</span
            >
          </el-col>
        </el-row>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import {
  getReportList,
  saveReportTask,
  getRoundOrBatchList,
  getSpectTypeList,
  getCityList,
  deleteReport,
} from "@/api/change/dispatch";
import { getdownLoadZip, getSingleInfo } from "@/utils/styem";
import { getFileInfo } from "@/api/file";
// import { dictListType, dictName } from "@/api/styem/dict/type";
export default {
  data() {
    return {
      showSearch: true,
      queryParams: {
        levelType: undefined,
        inspectType: undefined,
        roundId: undefined,
        batchId: undefined,
        pageNo: 1,
        pageSize: 10,
        schemeName: undefined,
      },
      superviseLevelArry: [], //督察级别
      superviseTypeArry: [], // 督察类型字典
      superviseRoundArry: [], //轮次下拉
      superviseBatchArry: [], //批次下拉
      superviseTypeArry2: [], // 督察类型字典-弹框
      superviseRoundArry2: [], //轮次下拉 --弹框
      superviseBatchArry2: [], //批次下拉 --弹框
      cityArry: [],
      issueDate: undefined,
      List: [],
      total: 0,
      loading: true,
      dialogTitle: "整改方案",
      open: false,
      dialogParams: {
        id: "",
        month: "",
        content: "",
        levelType: undefined,
        levelTypeName: "",
        inspectType: undefined,
        inspectTypeName: "",
        roundName: "",
        roundId: "",
        batchId: undefined,
        batchName: "",
        schemeName: "",
        cityCode: "",
        cityName: "",
        fileReport: "",
        fileReportName: "",
        fileSupervise: "",
        fileSuperviseName:'',
        fileSupervisePath:'',
      },
      dialogRules: {
        planFile: [{ required: true, message: "请上传方案电子件" }],
        rectificationMeasuresFile: [
          { required: true, message: "请上传整改措施电子件" },
        ],
      },
      check: false,
      attachementName: undefined,
      attachementPath: undefined,
    };
  },
  created() {
    this.getReportList();
    this.getSuperviseLevelList();
    this.getCityList();
  },
  methods: {
    async getReportList() {
      this.loading = true;
      const reponse = await getReportList(this.queryParams);
      this.List = reponse.data.list;
      this.total = reponse.data.count;
      this.loading = false;
    },
    handleDialogClose() {
      this.open = false;
      this.handleformClear();
      this.clearDialog();
      this.$refs.uploadFile && this.$refs.uploadFile.handleClear();
    },
    onQuery() {
      this.getReportList();
      this.queryParams.pageNo = 1;
    },
    clearDialog: function () {
      for (let i in this.dialogParams) {
        if (i != "cityCode" && i != "cityName") {
          this.$set(this.dialogParams, i, "");
          console.log(this.dialogParams);
        }
      }
      console.log(this.dialogParams);
    },
    onClear() {
      this.queryParams.levelType = undefined;
      this.queryParams.inspectType = undefined;
      this.queryParams.roundId = undefined;
      this.queryParams.batchId = undefined;
      this.queryParams.schemeName = undefined;
    },
    dailogSubmit() {
      this.$refs.dialogForm.validate(async (valid) => {
        if (valid) {
          console.log("-------", this.dialogParams);
          const reponse = await saveReportTask(this.dialogParams);
          this.getReportList();
          this.open = false;
          this.handleformClear();
          this.$refs.uploadFile.handleClear();
        }
      });
    },
    handleDialogCheckClose() {
      this.check = false;
      this.handleCheckClear();
      this.clearDialog();
      this.$refs.uploadFile && this.$refs.uploadFile.handleClear();
    },
    async handleSee(info) {
      this.check = true;
      this.getDialogInfo(info);
    },
    async handleEdit(info) {
      this.dialogTitle = "修改";
      this.getDialogInfo(info);
      this.changeSuperviseLevel(2, 1);
      this.changeSuperviseType(2, 1);
      this.changeSuperviseRound(2, 1);

      this.open = true;
    },
    getDialogInfo(info) {
      debugger;
      for (let key in this.dialogParams) {
        if (info[key]) {
          this.$set(this.dialogParams, key, info[key]);
        }
      }
      debugger;
      this.getSingleMessagInfo(this.dialogParams.fileSupervise);
      this.$nextTick(() => {
        if (this.$refs.uploadFile0) {
          this.$refs.uploadFile0.getFileMessageInfo();
        }
        if (this.$refs.uploadFile1) {
          this.$refs.uploadFile1.getFileMessageInfo();
        }
      });
    },
    async getSingleMessagInfo(fileId) {
      const reponse = await getFileInfo({ ids: fileId });
      if (reponse.data && reponse.data.length) {
        const subject = reponse.data;
        if (reponse.data && reponse.data.length) {
          const subject = reponse.data;
          this.dialogParams.fileSuperviseName = subject[0].file_name;
          this.dialogParams.fileSupervisePath = subject[0].save_path;
        }
      }
    },
    handleDelete(id) {
      this.$confirm("是否要删除", "确认信息", {
        distinguishCancelAndClose: true,
        confirmButtonText: "删除",
        cancelButtonText: "取消",
      }).then(async () => {
        const reponse = await deleteReport({ id: id });
        this.getReportList();
      });
    },
    handlePreviewClick(ids) {
      getFileInfo({ ids }).then((res) => {
        let path = res.data[0].save_path;
        getdownLoadZip(path);
      });
    },
    handleformClear() {
      this.resetFieldsTap("dialogForm");
      this.dialogParams.id = undefined;
    },
    handleCheckClear() {
      this.dialogParams.id = undefined;
      this.dialogParams.title = undefined;
      this.dialogParams.fileId = undefined;
      this.dialogParams.reportDate = undefined;
    },
    issueDateChange(picker) {
      if (picker == null) {
        this.queryParams.beginReportDate = undefined;
        this.queryParams.endReportDate = undefined;
      } else {
        this.queryParams.beginReportDate = picker[0];
        this.queryParams.endReportDate = picker[1];
      }
    },
    setUrlPath(file) {
      this.dialogParams[file.fromKey] = file.fileId;
    },
    deleteServeFile(file) {
      this.dialogParams[file.fromKey] = undefined;
    },
    //   dq

    getSuperviseLevelList: function () {
      getSpectTypeList({ parentId: 0 })
        .then((res) => {
          this.superviseLevelArry = res.data;
        })
        .catch((res) => {
          console.log(res);
        });
    },
    getCityList: function () {
      getCityList()
        .then((res) => {
          this.dialogParams.cityName = res.data.teamInfo.areaName;
          this.dialogParams.cityCode = res.data.teamInfo.areaCode;
        })
        .catch((res) => {
          console.log(res);
        });
    },
    changeSuperviseLevel: function (type, isreshow) {
      let value, relatedArr, id;
      if (type == "2") {
        value = this.dialogParams.levelType;
        relatedArr = "superviseTypeArry2";
        //清空关联表单
        this.superviseTypeArry2 = [];
        this.superviseRoundArry2 = [];
        this.superviseBatchArry2 = [];
        if (!isreshow) {
          this.dialogParams.inspectType = undefined;
          this.dialogParams.roundId = undefined;
          this.dialogParams.batchId = undefined;
        }
      } else {
        value = this.queryParams.levelType;
        relatedArr = "superviseTypeArry";
        this.superviseTypeArry = [];
        this.superviseRoundArry = [];
        this.superviseBatchArry = [];
        this.queryParams.inspectType = undefined;
        this.queryParams.roundId = undefined;
        this.queryParams.batchId = undefined;
      }
      this.superviseLevelArry.forEach((item) => {
        if (item.value == value) {
          id = item.id;
        }
      });
      getSpectTypeList({ parentId: id })
        .then((res) => {
          this[relatedArr] = res.data;
        })
        .catch((res) => {});
    },
    changeSuperviseType: function (type, isreshow) {
      let value, relatedArr;
      if (type == "2") {
        value = this.dialogParams.inspectType;
        relatedArr = "superviseRoundArry2";
        //清空关联表单
        this.superviseRoundArry2 = [];
        this.superviseBatchArry2 = [];
        if (!isreshow) {
          this.dialogParams.roundId = undefined;
          this.dialogParams.batchId = undefined;
        }
      } else {
        value = this.queryParams.inspectType;
        relatedArr = "superviseRoundArry";
        this.superviseRoundArry = [];
        this.superviseBatchArry = [];
        this.queryParams.roundId = undefined;
        this.queryParams.batchId = undefined;
      }
      getRoundOrBatchList({ inspectType: value })
        .then((res) => {
          res.data.forEach((item) => {
            item.batchId = item.batchId.toString();
          });
          this[relatedArr] = res.data;
        })
        .catch((res) => {
          console.log(res);
        });
    },
    changeSuperviseRound: function (type, isreshow) {
      let value, relatedArr;
      if (type == "2") {
        value = this.dialogParams.roundId;
        relatedArr = "superviseBatchArry2";
        //清空关联表单
        this.superviseBatchArry2 = [];
        if (!isreshow) {
          this.dialogParams.batchId = undefined;
        }
      } else {
        value = this.queryParams.roundId;
        relatedArr = "superviseBatchArry";
        this.superviseBatchArry = [];
        this.queryParams.batchId = undefined;
      }
      getRoundOrBatchList({ id: value })
        .then((res) => {
          res.data.forEach((item) => {
            item.batchId = item.batchId.toString();
          });
          this[relatedArr] = res.data;
        })
        .catch((res) => {
          console.log(res);
        });
    },
  },
};
</script>
<style lang="scss" scoped>
.twoLayoutForm .el-form-item /deep/ .el-form-item__label {
  width: 150px !important;
}
.inline {
  display: inline-block !important;
}
</style>


