<template>
  <div class="information-inner information-change">
    <h1 class="information-title active">整改问责</h1>
    <div class="tab-list-content">
      <div class="box-body" v-show="showSearch">
        <el-form :model="queryParams" label-width="120px">
          <el-row>
            <el-col :span="24">
              <div class="line">
                <el-form-item label="督察信息：">
                  <el-select
                    placeholder="请选择督察级别"
                    @change="changeSuperviseLevel(1)"
                    v-model="queryParams.levelType"
                  >
                    <el-option
                      v-for="item in superviseLevelArry"
                      :key="item.id"
                      :label="item.name"
                      :value="item.value"
                    >
                    </el-option>
                  </el-select>
                  <el-select
                    v-model="queryParams.inspectType"
                    placeholder="请选择督察类型"
                    @change="changeSuperviseType(1)"
                  >
                    <el-option
                      v-for="item in superviseTypeArry"
                      :key="item.id"
                      :label="item.name"
                      :value="item.value"
                    >
                    </el-option>
                  </el-select>
                  <el-select
                    v-model="queryParams.roundId"
                    placeholder="请选择督察轮次"
                    @change="changeSuperviseRound(1)"
                  >
                    <el-option
                      v-for="item in superviseRoundArry"
                      :key="item.id"
                      :label="item.batchName"
                      :value="item.batchId"
                    >
                    </el-option>
                  </el-select>
                  <el-select
                    v-model="queryParams.batchId"
                    placeholder="请选择督察批次"
                  >
                    <el-option
                      v-for="item in superviseBatchArry"
                      :key="item.id"
                      :label="item.batchName"
                      :value="item.batchId"
                    >
                    </el-option>
                  </el-select>
                </el-form-item>
              </div>
            </el-col> </el-row
          ><el-row>
            <el-col :span="8">
              <div class="line3">
                <el-form-item label="地区搜索：">
                  <el-select
                    v-model="queryParams.areaCode"
                    placeholder="请选择地区搜索"
                  >
                    <el-option
                      v-for="item in writeCityArry"
                      :key="item.code"
                      :label="item.name"
                      :value="item.code"
                    >
                    </el-option>
                  </el-select>
                </el-form-item>
              </div>
            </el-col>
            <el-col :span="8"><div style="height: 10px"></div></el-col>
            <el-col :span="8">
              <el-form-item class="pull-right">
                <el-button type="primary" @click="onQuery">查询</el-button>
                <el-button type="primary" @click="onClear">清空</el-button>
              </el-form-item>
            </el-col>
          </el-row>
        </el-form>
      </div>
      <el-row :gutter="10" class="mb8">
        <el-button
          size="small"
          @click="handleNewly"
          type="primary"
          v-if="buttonAuthority"
          >新增</el-button
        >
        <right-toolbar
          :showSearch.sync="showSearch"
          @queryTable="getAskList"
        ></right-toolbar>
      </el-row>
      <el-table v-loading="loading" :data="List" border :stripe="true">
        <el-table-column width="50" label="序号">
          <template scope="scope">
            <span>{{
              (queryParams.pageNo - 1) * queryParams.pageSize + scope.$index + 1
            }}</span>
          </template></el-table-column
        >
        <el-table-column label="督察类型" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.inspectTypeName }}</span>
          </template>
        </el-table-column>
        <el-table-column label="督察轮次、批次" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.roundName }}、{{ scope.row.batchName }}</span>
          </template>
        </el-table-column>
        <el-table-column label="督察地区" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.areaName }}</span>
          </template>
        </el-table-column>
        <el-table-column label="问责事由" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.rectifyContent }}</span>
          </template>
        </el-table-column>
        <el-table-column label="姓名" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.name }}</span>
          </template>
        </el-table-column>
        <el-table-column label="单位" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.unit }}</span>
          </template>
        </el-table-column>
        <el-table-column label="级别" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.levelName }}</span>
          </template>
        </el-table-column>
        <el-table-column label="问责时间" width="160px"
          ><template v-slot="scope">
            <span>{{ scope.row.accountTime }}</span>
          </template>
        </el-table-column>
        <el-table-column label="问责方式" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.accountWayName }}</span>
          </template>
        </el-table-column>
        <el-table-column label="责任类型" min-width="200px">
          <template v-slot="scope">
            <span>{{ scope.row.liaibilityTypeName }}</span>
          </template>
        </el-table-column>
        <el-table-column label="操作" width="200" v-if="buttonAuthority">
          <template v-slot="scope">
            <el-button size="mini" type="primary" @click="handleEdit(scope.row)"
              >修改</el-button
            >
            <el-button
              size="mini"
              type="danger"
              @click="handleDelete(scope.row.id)"
              >删除</el-button
            >
          </template>
        </el-table-column>
      </el-table>
      <pagination
        v-show="total > 0"
        :total="total"
        :pageNo.sync="queryParams.pageNo"
        :limit.sync="queryParams.pageSize"
        @pagination="getAskList"
      />
    </div>
    <el-dialog
      :title="dialogTitle"
      :visible="true"
      v-if="open"
      width="80%"
      :before-close="handleDialogClose"
      :close-on-click-modal="false"
      append-to-body
    >
      <el-form
        ref="dialogForm"
        :model="dialogParams"
        :rules="dialogRules"
        label-width="80px"
        class="dialogForm twoLayoutForm"
      >
        <el-divider content-position="left">任务信息</el-divider>
        <el-row :gutter="24">
          <el-col :span="24">
            <el-form-item label="整改任务：" prop="accountSourceId">
              <el-select
                placeholder="请选择整改任务"
                @change="changeTask"
                filterable
                class="w-100"
                v-model="dialogParams.accountSourceId"
              >
                <el-option
                  v-for="item in taskArray"
                  :key="item.id"
                  :label="item.rectifyContent"
                  :value="item.id"
                >
                <el-popover v-if="item.rectifyContent.length >= 68" placement="top-start" width="400" trigger="hover">
                 <p>{{ item.rectifyContent }}</p>
                <span slot="reference">{{ item.rectifyContent.slice(0,65) + '...' }}</span>
              </el-popover>
              <span v-else>{{ item.rectifyContent }}</span>
                </el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="督察类型：">
              <el-input
                class="inputWidth"
                v-model.trim="inspectTypeName"
                disabled
              ></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="督察轮次：">
              <el-input
                class="inputWidth"
                v-model.trim="roundName"
                disabled
              ></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="督察批次：">
              <el-input
                class="inputWidth"
                v-model.trim="batchName"
                disabled
              ></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="所属区域地区：">
              <el-input
                class="inputWidth"
                v-model.trim="dialogParams.areaName"
                disabled
              ></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-divider content-position="left">问责信息</el-divider>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="姓名：" prop="name">
              <el-input
                class="inputWidth"
                v-model.trim="dialogParams.name"
              ></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="单位：" prop="unit">
              <el-input
                class="inputWidth"
                v-model.trim="dialogParams.unit"
              ></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="职务：" prop="post">
              <el-input
                class="inputWidth"
                v-model.trim="dialogParams.post"
              ></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="级别：" prop="level">
              <el-select placeholder="请选择级别" v-model="dialogParams.level">
                <el-option
                  v-for="item in levelArray"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value"
                >
                </el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="人员分类：" prop="staffType">
              <el-select
                placeholder="请选择级别"
                v-model="dialogParams.staffType"
              >
                <el-option
                  v-for="item in staffTypeArray"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value"
                >
                </el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="追责时间：" prop="accountTime">
              <el-date-picker
                v-model="dialogParams.accountTime"
                format="yyyy-MM-d"
                value-format="yyyy-MM-dd"
                type="date"
                placeholder="选择日期"
              >
              </el-date-picker>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="12">
            <el-form-item label="问责方式：" prop="accountWay">
              <el-select
                placeholder="请选择问责方式"
                v-model="dialogParams.accountWay"
              >
                <el-option
                  v-for="item in accountWayArray"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value"
                >
                </el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="责任类型：" prop="liaibilityType">
              <el-select
                placeholder="请选择责任类型"
                v-model="dialogParams.liaibilityType"
              >
                <el-option
                  v-for="item in liaibilityTypeArray"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value"
                >
                </el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>

        <div class="dialogFormFooter">
          <el-button type="primary" @click="dailogSubmit">保存</el-button>
          <el-button type="primary" @click="handleDialogClose">关闭</el-button>
        </div>
      </el-form>
    </el-dialog>
  </div>
</template>

<script>
import {
  getAskList,
  saveAsk,
  getRoundOrBatchList,
  getSpectTypeList,
  getCityList,
  deleteAsk,
  getTaskList,
} from "@/api/change/dispatch";
import { getdownLoadZip, getSingleInfo } from "@/utils/styem";
import { getFileInfo } from "@/api/file";
import { mapGetters } from "vuex";
import { dictListType } from "@/api/styem/dict/type";
import { getAreaList } from "@/api/support/analyse";
export default {
  data() {
    return {
      writeCityArry: [],
      buttonAuthority: true,
      showSearch: true,
      inspectTypeName: "",
      roundName: "",
      batchName: "",
      queryParams: {
        levelType: undefined,
        inspectType: undefined,
        roundId: undefined,
        batchId: undefined,
        pageNo: 1,
        pageSize: 10,
        areaCode: undefined,
      },
      superviseLevelArry: [], //督察级别
      superviseTypeArry: [], // 督察类型字典
      superviseRoundArry: [], //轮次下拉
      superviseBatchArry: [], //批次下拉
      superviseTypeArry2: [], // 督察类型字典-弹框
      superviseRoundArry2: [], //轮次下拉 --弹框
      superviseBatchArry2: [], //批次下拉 --弹框
      taskArray: [], //任务列表
      cityArry: [],
      levelArray: [],
      staffTypeArray: [],
      accountWayArray: [],
      liaibilityTypeArray: [],
      issueDate: undefined,
      List: [],
      total: 0,
      loading: true,
      dialogTitle: "整改方案",
      open: false,
      dialogParams: {
        name: "",
        unit: "",
        post: "",
        level: "",
        staffType: "",
        cityCode: "",
        areaName: "",
        accountTime: "",
        accountWay: "",
        liaibilityType: "",
        accountSourceId: "",
        inspectType: "",
      },
      dialogRules: {
        accountSourceId: [
          { required: true, message: "请选择整改任务", trigger: "change" },
        ],
        name: [{ required: true, message: "请填写姓名", trigger: "blur" }],
        unit: [{ required: true, message: "请填写单位", trigger: "blur" }],
        post: [{ required: true, message: "请填写职务", trigger: "blur" }],
        level: [{ required: true, message: "请选择级别", trigger: "change" }],
        staffType: [
          { required: true, message: "请选择人员分类", trigger: "change" },
        ],
        accountTime: [
          { required: true, message: "请选择追责时间", trigger: "change" },
        ],
        accountWay: [
          { required: true, message: "请选择问责方式", trigger: "change" },
        ],
        liaibilityType: [
          { required: true, message: "请选择责任类型", trigger: "change" },
        ],
      },
      check: false,
      attachementName: undefined,
      attachementPath: undefined,
    };
  },
  computed: {
    ...mapGetters(["userInfo"]),
  },
  created() {
    if (this.userInfo.weatherRectify) {
      this.buttonAuthority = true;
    } else {
      this.buttonAuthority = false;
    }
    this.getAskList();
    this.getSuperviseLevelList();
    this.getCityList();
    this.getWriteCityArry();
  },
  methods: {
    async getAskList() {
      this.loading = true;
      const reponse = await getAskList(this.queryParams);
      this.List = reponse.data.list;
      this.total = reponse.data.count;
      this.loading = false;
    },
    handleNewly() {
      this.getTaskArray();
      this.getLevelArray();
      this.getStaffTypeArray();
      this.getAccountWayArray();
      this.getLiaibilityTypeArray();
      this.getCityList();
      this.dialogTitle = "新增";
      this.handleformClear("dialogForm");
      this.clearDialog();
      this.open = true;
    },
    handleDialogClose() {
      this.open = false;
      this.handleformClear();
      this.clearDialog();
      this.$refs.uploadFile && this.$refs.uploadFile.handleClear();
    },
    onQuery() {
      this.getAskList();
      this.queryParams.pageNo = 1;
    },
    clearDialog: function () {
      for (let i in this.dialogParams) {
        if (i != "cityCode" && i != "areaName") {
          this.$set(this.dialogParams, i, "");
        }
      }
    },
    onClear() {
      this.queryParams.levelType = undefined;
      this.queryParams.inspectType = undefined;
      this.queryParams.roundId = undefined;
      this.queryParams.batchId = undefined;
      this.superviseTypeArry = [];
      this.superviseRoundArry = [];
      this.superviseBatchArry = [];
    },
    dailogSubmit() {
      this.$refs.dialogForm.validate(async (valid) => {
        if (valid) {
          const reponse = await saveAsk(this.dialogParams);
          this.getAskList();
          this.open = false;
          this.handleformClear();
        }
      });
    },
    handleDialogCheckClose() {
      this.check = false;
      this.handleCheckClear();
      this.clearDialog();
    },
    async handleEdit(info) {
      this.getTaskArray();
      this.getLevelArray();
      this.getStaffTypeArray();
      this.getAccountWayArray();
      this.getLiaibilityTypeArray();
      this.dialogTitle = "修改";
      this.getDialogInfo(info);
      this.open = true;
    },
    getWriteCityArry: function () {
      getAreaList().then((res) => {
        this.writeCityArry = res.data;
      });
    },
    getDialogInfo(info) {
      for (let key in this.dialogParams) {
        if (info[key]) {
          this.$set(this.dialogParams, key, info[key]);
        }
      }
    },
    async getSingleMessagInfo(fileId) {
      const reponse = await getFileInfo({ ids: fileId });
      if (reponse.data && reponse.data.length) {
        const subject = reponse.data;
        if (reponse.data && reponse.data.length) {
          const subject = reponse.data;
          this.attachementName = subject[0].file_name;
          this.attachementPath = subject[0].save_path;
        }
      }
    },
    handleDelete(id) {
      this.$confirm("是否要删除", "确认信息", {
        distinguishCancelAndClose: true,
        confirmButtonText: "删除",
        cancelButtonText: "取消",
      }).then(async () => {
        const reponse = await deleteAsk({ id: id });
        this.getAskList();
      });
    },
    handlePreviewClick(ids) {
      getFileInfo({ ids }).then((res) => {
        let path = res.data[0].save_path;
        getdownLoadZip(path);
      });
    },
    handleformClear() {
      this.resetFieldsTap("dialogForm");
      this.dialogParams.id = undefined;
    },
    handleCheckClear() {
      this.dialogParams.id = undefined;
      this.dialogParams.title = undefined;
      this.dialogParams.fileId = undefined;
      this.dialogParams.reportDate = undefined;
    },
    setUrlPath(file) {
      this.dialogParams[file.fromKey] = file.fileId;
    },
    deleteServeFile(file) {
      this.dialogParams[file.fromKey] = undefined;
    },
    //   dq

    getSuperviseLevelList: function () {
      getSpectTypeList({ parentId: 0 }).then((res) => {
        this.superviseLevelArry = res.data;
      });
    },
    getCityList: function () {
      getCityList().then((res) => {
        this.dialogParams.areaName = res.data.teamInfo.areaName;
        this.dialogParams.cityCode = res.data.teamInfo.areaCode;
      });
    },
    changeSuperviseLevel: function (type, isreshow) {
      let value, relatedArr, id;
      if (type == "2") {
        value = this.dialogParams.levelType;
        relatedArr = "superviseTypeArry2";
        //清空关联表单
        this.superviseTypeArry2 = [];
        this.superviseRoundArry2 = [];
        this.superviseBatchArry2 = [];
        if (!isreshow) {
          this.dialogParams.superviseType = undefined;
          this.dialogParams.roundId = undefined;
          this.dialogParams.batchId = undefined;
        }
      } else {
        value = this.queryParams.levelType;
        relatedArr = "superviseTypeArry";
        this.superviseTypeArry = [];
        this.superviseRoundArry = [];
        this.superviseBatchArry = [];
        this.queryParams.superviseType = undefined;
        this.queryParams.roundId = undefined;
        this.queryParams.batchId = undefined;
      }
      this.superviseLevelArry.forEach((item) => {
        if (item.value == value) {
          id = item.id;
        }
      });
      getSpectTypeList({ parentId: id })
        .then((res) => {
          this[relatedArr] = res.data;
        })
        .catch((res) => {});
    },
    changeSuperviseType: function (type, isreshow) {
      let value, relatedArr;
      if (type == "2") {
        value = this.dialogParams.inspectType;
        relatedArr = "superviseRoundArry2";
        //清空关联表单
        this.superviseRoundArry2 = [];
        this.superviseBatchArry2 = [];
        if (!isreshow) {
          this.dialogParams.roundId = undefined;
          this.dialogParams.batchId = undefined;
        }
      } else {
        value = this.queryParams.inspectType;
        relatedArr = "superviseRoundArry";
        this.superviseRoundArry = [];
        this.superviseBatchArry = [];
        this.queryParams.roundId = undefined;
        this.queryParams.batchId = undefined;
      }
      getRoundOrBatchList({ superviseType: value }).then((res) => {
        res.data.forEach((item) => {
          item.batchId = item.batchId.toString();
        });
        this[relatedArr] = res.data;
      });
    },
    changeSuperviseRound: function (type, isreshow) {
      let value, relatedArr;
      if (type == "2") {
        value = this.dialogParams.roundId;
        relatedArr = "superviseBatchArry2";
        //清空关联表单
        this.superviseBatchArry2 = [];
        if (!isreshow) {
          this.dialogParams.batchId = undefined;
        }
      } else {
        value = this.queryParams.roundId;
        relatedArr = "superviseBatchArry";
        this.superviseBatchArry = [];
        this.queryParams.batchId = undefined;
      }
      getRoundOrBatchList({ id: value }).then((res) => {
        res.data.forEach((item) => {
          item.batchId = item.batchId.toString();
        });
        this[relatedArr] = res.data;
      });
    },
    getTaskArray: function () {
      getTaskList({
        writeCityCode: this.dialogParams.cityCode,
      }).then((res) => {
        res.data[0].rectifyContent = '发飞洒。发发飞洒发，收发飞洒。发发飞洒发，收发飞洒发发。飞洒发，收发飞洒发。发飞洒发，收发飞洒发。发飞洒发，收发。飞洒发发飞洒发，收发飞洒发发飞洒发，收发飞洒发发飞洒发，收发飞洒发发飞洒发，收'
        this.taskArray = res.data;
        
      });
    },
    getLevelArray: function () {
      dictListType({
        type: "staff_level",
      }).then((res) => {
        this.levelArray = res.data;
      });
    },
    getStaffTypeArray: function () {
      dictListType({
        type: "staff_type",
      }).then((res) => {
        this.staffTypeArray = res.data;
      });
    },
    getAccountWayArray: function () {
      dictListType({
        type: "account_way",
      }).then((res) => {
        this.accountWayArray = res.data;
      });
    },
    getLiaibilityTypeArray: function () {
      dictListType({
        type: "blame_type",
      }).then((res) => {
        this.liaibilityTypeArray = res.data;
      });
    },
    changeTask: function (e) {
      this.taskArray.forEach((item) => {
        if (item.id == e) {
          this.dialogParams.inspectType = item.inspectType;
          this.inspectTypeName = item.inspectTypeName;
          this.roundName = item.roundName;
          this.batchName = item.batchName;
        }
      });
    },
  },
};
</script>
<style lang="scss" scoped>
.line {
  .el-form-item__content {
    .el-select {
      width: 25% !important;
      padding-right: 10px;
    }
    .el-input {
      width: 50% !important;
    }
  }
}
.twoLayoutForm .el-form-item /deep/ .el-form-item__label {
  width: 150px !important;
}
.inline {
  display: inline-block !important;
}
.pull-right {
  margin-right: 10px !important;
}
.line3 {
  .el-form-item__content {
    .el-select {
      width: 100% !important;
      // padding-right: 10px;
    }
    .el-input {
      width: 100% !important;
      // padding-right: 10px;
    }
  }
}
/deep/ .el-select-dropdown__item {
  width: 100px;
  display: inline-block;
  overflow: scroll;
}
.w-100 {
      width: 100%;
    }

</style>



