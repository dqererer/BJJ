<template>
  <div class="implement">
    <div class="top">
      <div class="card card-l">
        <title>整改任务推进情况</title>
        <div class="content">
          <div
            class="item"
            v-for="(item, index) in progressList"
            v-bind:key="index"
            @click="handleClick(index, item.label)"
          >
            <div>{{ item.num }}个</div>
            <el-link :underline="false">
              <i
                v-if="index == '0'"
                class="el-icon-circle-check"
                :style="{ color: 'green' }"
              ></i>
              <i
                v-if="index == '1'"
                class="el-icon-video-play"
                :style="{ color: 'green' }"
              ></i>
              <i
                v-if="index == '2'"
                class="el-icon-video-pause"
                :style="{ color: 'red' }"
              ></i>
              <i
                v-if="index == '3'"
                class="el-icon-warning-outline"
                :style="{ color: 'orange' }"
              ></i>
              <i
                v-if="index == '4'"
                class="el-icon-remove-outline"
                :style="{ color: 'red' }"
              ></i>
              <i
                v-if="index == '5'"
                class="el-icon-circle-close"
                :style="{ color: 'green' }"
              ></i>
              <span class="bold">{{ item.label }}</span></el-link
            >
          </div>
        </div>
      </div>
      <div class="card card-m" @click="handleClick(6, '超期预警任务')">
        <title>超期预警任务</title>
        <div class="content">
          <div class="num">{{ polluteNum | 1000 }}</div>
          <div id="circleCharts"></div>
        </div>
      </div>
      <div class="card card-r" @click="handleClick(7, '本月上报率')">
        <title>本月上报率</title>
        <div class="content">
          <div class="title">整改任务：</div>
          <div class="line">
            <el-progress
              :percentage="taskRate"
              :stroke-width="16"
              :show-text="false"
            ></el-progress>
            <p>整体上报率为{{ taskRate }}%</p>
          </div>
        </div>
        <div class="content">
          <div class="title">月度报告：</div>
          <div class="line">
            <el-progress
              :percentage="taskRate"
              :stroke-width="16"
              :show-text="false"
            ></el-progress>
            <el-popover placement="top-start" width="200" trigger="hover">
              <div>未上报地市：{{ citys }}</div>
              <p class="city" slot="reference">未上报地市：{{ citys }}</p>
            </el-popover>
          </div>
        </div>
      </div>
    </div>
    <div class="buttom">
      <div class="card card-l">
        <title><span class="red"> {{ dataType }}</span>任务情况分布情况</title>
        <div class="content"><div id="dispath"></div></div>
      </div>
      <div class="card card-r">
        <header>
          <div class="filter">
            <el-link :underline="false" @click="getTaskDataByYJM('quarter')"
              >本季</el-link
            >
            <el-link :underline="false" @click="getTaskDataByYJM('month')"
              >本月</el-link
            >
            <el-link :underline="false" @click="getTaskDataByYJM('year')"
              >全年</el-link
            >
          </div>
          <el-date-picker
            size="small"
            v-model="value1"
            type="daterange"
            range-separator="至"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            @change="handleDatePickerChange"
          >
          </el-date-picker>
        </header>
        <div class="content">
          <el-table :data="tableData" border style="width: 100%" height="100%">
            <el-table-column type="index" label="序号" width="60">
            </el-table-column>
            <el-table-column prop="rectifyContent" label="任务名称" width="180">
            </el-table-column>
            <el-table-column prop="taskTypeOneName" label="任务类型">
            </el-table-column>
            <el-table-column prop="finishSituationName" label="完成情况">
            </el-table-column>
          </el-table>
        </div>
        <div class="more">
          <el-button type="primary" @click="goToTask">查看更多</el-button>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import {
  getProgressData,
  getTaskData,
  getPieData,
  getProgress,
  getBarData,
  getTaskDataByYJM,
} from "@/api/change/dispatch";
import * as echarts from "echarts";
require("echarts/theme/macarons"); //引入主题
export default {
  data() {
    return {
      progressList: [],
      circleCharts: null,
      barCharts: null,
      value1: "",
      tableData: [],
      polluteNum: "",
      taskRate: 0,
      citys: "",
      xData: [],
      yData: [],
      yData2: [],
      dataType: "已完成",
    };
  },
  created() {
    this.getProgressData();
    this.getTaskData();
    this.getPieData();
    this.getProgress();
    this.getBarData();
    this.$nextTick(() => {
      this.drawBar();
    });
  },
  methods: {
    handleDatePickerChange: function () {
      this.getTaskData();
    },
    getProgressData: function () {
      getProgressData()
        .then((res) => {
          if (res.code == "200") {
            this.progressList = res.data;
          } else {
            this.$message.error(res.msg);
          }
        })
        .catch();
    },
    getTaskData: function () {
      getTaskData({
        startDate: this.value1[0],
        endDate: this.value1[1],
      }).then((res) => {
        if (res.code == "200") {
          this.tableData = res.data;
        } else {
          this.$message.error(res.msg);
        }
      });
    },
    getPieData: function () {
      getPieData().then((res) => {
        let arr = [];
        this.polluteNum = res.data.total;
        res.data.polluteType.forEach((element) => {
          let obj = {};
          obj.value = element.num;
          obj.name = element.label;
          arr.push(obj);
        });

        this.pieData = arr;
        this.$nextTick(() => {
          this.drawPieChart();
        });
      });
    },
    getProgress: function () {
      getProgress().then((res) => {
        this.taskRate = res.data.taskRate * 100;
        let arr = [];
        res.data.monthReportRate.forEach((item) => {
          arr.push(item.name);
        });
        this.citys = arr.join(",");
      });
    },
    getBarData: function (type = 1) {
      getBarData({
        finishSituation: type,
      }).then((res) => {
        let arr1 = [];
        let arr2 = [];
        let arr3 = [];
        if (type == 8) {
          res.data.forEach((item) => {
            arr1.push(item.yesReportRate ? item.yesReportRate : 0);
            arr2.push(item.write_city ? item.write_city : "");
            arr3.push(item.noReportRate ? item.noReportRate : 0);
          });
          this.xData = arr2;
          this.yData = arr1;
          this.yData2 = arr3;
          this.$nextTick(() => {
            this.drawDoubleBar();
          });
        } else {
          res.data.forEach((item) => {
            arr1.push(item.num ? item.num : 0);
            arr2.push(item.write_city ? item.write_city : "");
          });
          this.xData = arr2;
          this.yData = arr1;
          this.$nextTick(() => {
            this.drawBar();
          });
        }
      });
    },
    getTaskDataByYJM: function (type) {
      getTaskDataByYJM({
        type,
      }).then((res) => {
        this.tableData = res.data;
      });
    },
    drawPieChart() {
      this.circleCharts = echarts.init(
        document.getElementById("circleCharts"),
        "macarons",
        {
          width: 200,
          height: 200,
        }
      );
      this.circleCharts.setOption({
        tooltip: {
          trigger: "item",
        },
        series: [
          {
            type: "pie",
            data: this.pieData,
            label: {
              position: "inner",
              fontSize: 10,
            },
            tooltip: {
              trigger: "item",
              formatter: "{b} : {c} ({d}%)",
            },
            labelLine: {
              show: false,
            },
            emphasis: {
              itemStyle: {
                shadowBlur: 10,
                shadowOffsetX: 0,
                shadowColor: "rgba(0, 0, 0, 0.5)",
              },
            },
          },
        ],
      });
    },

    drawBar() {
      this.barCharts = echarts.init(
        document.getElementById("dispath"),
        "macarons"
      );
      this.barCharts.clear();
      this.barCharts.setOption({
        xAxis: {
          type: "category",
          data: this.xData,
        },
        yAxis: {
          type: "value",
        },
        series: [
          {
            data: this.yData,
            type: "bar",
          },
        ],
      });
    },
    drawDoubleBar() {
      this.isShowDouble = false;
      this.barCharts = echarts.init(
        document.getElementById("dispath"),
        "macarons"
      );
      this.barCharts.clear();
      this.barCharts.setOption({
        xAxis: {
          type: "category",
          data: this.xData,
        },
        yAxis: {
          type: "value",
        },
        series: [
          {
            data: this.yData,
            type: "bar",
            stack: "num",
          },
          {
            data: this.yData2,
            type: "bar",
            stack: "num",
          },
        ],
      });
    },
    goToTask: function () {
      this.$router.push({ path: "/task" });
    },
    handleClick: function (idx, text) {
      this.getBarData(idx + 1);
      this.dataType = text;
    },
    handleClick2: function () {
      this.isShowDouble = true;
      this.drawDoubleBar(8);
      this.dataType = "sss";
    },
  },
};
</script>
<style lang="scss" scoped>
.implement {
  padding: 10px;
  height: 100%;
  .top {
    display: flex;
    justify-content: space-between;
    height: 268px;
    .card {
      height: 100%;
      border-radius: 4px;
      border: 1px solid #ebeef5;
      background-color: #fff;
      overflow: hidden;
      color: #303133;
      transition: 0.3s;
      box-shadow: 0 2px 12px 0 #ebeef5;
      padding: 0px 20px 10px;
      title {
        display: block;
        border-bottom: 1px solid #ebeef5;
        height: 50px;
        line-height: 50px;
        padding-left: 10px;
        span {
          color: red;
        }
      }
    }
    .card-l {
      width: 49.5%;
      .content {
        display: flex;
        justify-content: space-around;
        height: calc(100% - 50px);
        align-items: center;
        .item {
          height: 70px;
          display: flex;
          flex-direction: column;
          justify-content: space-between;
          align-items: center;
          div {
            font-weight: bold;
          }
        }
      }
    }
    .card-m {
      width: 24.5%;
      .content {
        padding-bottom: 20px;
        display: flex;
        justify-content: space-around;
        .num {
          line-height: 200px;
          color: red;
          font-size: 28px;
          font-weight: bold;
        }
        #circleCharts {
          width: 200px;
          height: 200px;
        }
      }
    }
    .card-r {
      width: 24.5%;
      .content {
        display: flex;
        justify-content: flex-start;
        align-items: flex-start;
        padding: 30px 0 0;

        .title {
          font-weight: bold;
          font-size: 16px;
        }
        .line {
          width: calc(100% - 100px);
          p {
            margin: 0;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 2;
            word-wrap: break-word;
            word-break: break-all;
          }
        }
      }
    }
  }
  .buttom {
    height: calc(100% - 268px);
    padding-top: 10px;
    display: flex;
    justify-content: space-between;
    .card {
      height: 100%;
      border-radius: 4px;
      border: 1px solid #ebeef5;
      background-color: #fff;
      overflow: hidden;
      color: #303133;
      transition: 0.3s;
      box-shadow: 0 2px 12px 0 #ebeef5;
      padding: 10px 20px;
      title {
        display: block;
        border-bottom: 1px solid #ebeef5;
        height: 50px;
        line-height: 50px;
        padding-left: 10px;
      }
    }
    .card-l {
      width: 60.5%;
      .content {
        height: calc(100% - 60px);
        #dispath {
          height: 100%;
          width: 100%;
        }
      }
    }
    .card-r {
      width: 38.5%;
      header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 0;
        .filter {
          display: flex;
          justify-content: space-between;
          width: 100px;
          font-size: 13px;
        }
      }
      .content {
        height: calc(100% - 161px);
      }
      .more {
        padding-top: 20px;
        display: flex;
        justify-content: center;
      }
    }
  }
}
.red {
  color: red;
}
.bold {
  font-weight: bold;
}
</style>


