<template>
  <div class="styem-content" :style="{ height: contentAllH + 'px' }">
    <div class="styem-content-left" id="mapBox1">
      <div class="styem-ctop tip-ctop">
        <h1 class="styem-ctop-title" ref="ctopTitle">举报类型</h1>
        <div style="position: relative">
          <div class="styem-ctop-content" id="tipEchart" :style="{ height: tipContentH + 'px' }"></div>
          <div
            class="num"
            style="
              position: absolute;
              right: 0;
              height: 100%;
              width: 90px;
              top: calc(50% - 38px);
            "
          >
            <p
              style="color: #0aacff; margin:0;margin-bottom:4px;font-weight:bold;"
            >来电:{{ tipTypeData.subjectTipPhone }}件</p>
            <p
              style="color: rgba(244, 201, 7, 0.7);font-weight:bold; margin: 0"
            >来信:{{ tipTypeData.subjectTipLetter }}件</p>
          </div>
        </div>
        <i class="ctop-border ctop-left-top"></i>
        <i class="ctop-border ctop-right-top"></i>
      </div>
      <div class="styem-ctop pollute-ctop">
        <h1 class="styem-ctop-title">污染类型</h1>
        <div
          class="styem-ctop-content"
          id="polluteEchart"
          :style="{ height: polluteContentH + 'px' }"
        ></div>
        <i class="ctop-border ctop-left-top"></i>
        <i class="ctop-border ctop-right-top"></i>
      </div>
      <div class="styem-ctop industry-ctop">
        <h1 class="styem-ctop-title">行业类型</h1>
        <div
          class="styem-ctop-content"
          id="industryEchart"
          :style="{ height: industryContentH + 'px' }"
        ></div>
        <i class="ctop-border ctop-left-top"></i>
        <i class="ctop-border ctop-right-top"></i>
      </div>
    </div>
    <div class="styem-content-center" :style="{ height: centerH + 'px' }">
      <div class="styem-content-inner">
        <div
          class="map-box"
          @click="handleSmallMapClick(index)"
          :style="{
            height: centerBoxH + 'px',
            width: handleChangeWidth(index),
          }"
          v-for="(item, index) in middleArry"
          :key="index"
          :id="'map' + item.code"
        >
          <span class="content-center-address">{{ item.name }}</span>
          <div class="content-center-show">
            <span class="show-text">总件数</span>
            <span class="show-number">{{ item.value }}</span>
          </div>
        </div>
        <burg-middle-map
          ref="middleMapRef"
          :batchId="batchId"
          :cityData="cityData"
          :mapBoolean="mapBoolean"
          @handleBigMapClose="handleBigMapClose"
        ></burg-middle-map>
      </div>
      <div class="round-process">
        <div
          class="process-item"
          @click="handleBatchClick(index)"
          :class="isActive == index ? 'active' : ''"
          v-for="(item, index) in batchArry"
          :key="index"
        >
          <span class="process-line">
            <i class="process-circle"></i>
          </span>
          <span class="process-text">{{ item.roundName }}{{ item.batchName }}</span>
        </div>
      </div>
    </div>
    <div class="styem-content-right">
      <div class="styem-ctop tip-ctop">
        <h1 class="styem-ctop-title">受理举报情况</h1>
        <div class="styem-ctop-content" :style="{ height: tipContentH + 'px' }">
          <div class="tip-funnel">
            <span class="tip-funnel-item funnel-item-one">
              <i>办理{{ stateTemp.handleNum }}</i>
            </span>
            <span class="tip-funnel-item funnel-item-two">
              <i>转办{{ stateTemp.transferNum }}</i>
            </span>
            <span class="tip-funnel-item funnel-item-three">
              <i>受理{{ stateTemp.acceptNum }}</i>
            </span>
            <span class="tip-funnel-item funnel-item-four">
              <i>登记{{ stateTemp.registerNum }}</i>
            </span>
          </div>
        </div>
        <i class="ctop-border ctop-left-top"></i>
        <i class="ctop-border ctop-right-top"></i>
      </div>
      <div class="styem-ctop verified-ctop">
        <h1 class="styem-ctop-title">属实情况</h1>
        <div
          class="styem-ctop-content"
          id="verifiedEchart"
          :style="{ height: verifiedContentH + 'px' }"
        ></div>
        <i class="ctop-border ctop-left-top"></i>
        <i class="ctop-border ctop-right-top"></i>
      </div>
      <div class="styem-ctop industry-ctop">
        <h1
          class="styem-ctop-title"
          style="
            display: flex;
            justify-content: space-between;
            align-items: center;
          "
        >
          <span>案卷信息</span>
          <span class="files-more-btn" @click="handleMoreClick">更多</span>
        </h1>
        <div class="styem-ctop-content" :style="{ height: filesContentH + 'px' }">
          <div class="files-box">
            <div
              class="files-item"
              v-for="(item, index) in archiveList"
              :key="index"
              @click="handleFilesItemClick(item)"
            >
              <img class="files-item-img" :src="item.archImgSrc" alt />
              <div class="files-item-right">
                <p class="files-item-title">{{ item.archiveName }}</p>
                <p class="files-item-time">
                  <i>{{ item.archiveTime }}</i>
                  <i>{{ item.areaName }}</i>
                </p>
              </div>
            </div>
          </div>
        </div>
        <i class="ctop-border ctop-left-top"></i>
        <i class="ctop-border ctop-right-top"></i>
      </div>
    </div>
    <burg-files-more
      ref="burgFilesMoreRef"
      :filesMoreBoolean="filesMoreBoolean"
      :batchId="batchId"
      :cityData="cityData"
      @handleDialogClose="handleDialogClose"
    ></burg-files-more>
    <burg-middle-more ref="burgMiddleeMoreRef" :batchId="batchId" :cityData="cityData"></burg-middle-more>
    <burg-letter-pop></burg-letter-pop>
    <burg-task-pop></burg-task-pop>
  </div>
</template>

<script>
import {
  bigBatchList,
  bigLeftChartData,
  bigMiddleData,
  bigMiddleDataPoint,
  bigMiddleDetailData,
  bigMiddleDetailPage,
  bigRightChartData
} from "@/api/bigScreen";
import { imgShow } from "@/utils/imgShow";
import burgMiddleMap from "./burgMiddleMap";
import burgFilesMore from "./burgFilesMore";
import burgMiddleMore from "./burgMiddleMore";
import burgLetterPop from "./burgLetterPop";
import burgTaskPop from "./burgTaskPop";
import { module } from "@/utils/map";
import Bus from "@/utils/vueBus";
export default {
  components: {
    burgMiddleMap,
    burgFilesMore,
    burgMiddleMore,
    burgLetterPop,
    burgTaskPop
  },
  data() {
    return {
      isActive: 0,
      cityCode: undefined,
      batchId: undefined,
      batchArry: undefined,
      tipTypeData: {
        subjectTipPhone: undefined,
        subjectTipLetter: undefined
      },
      pollutionData: {
        pollutionValueArry: undefined,
        dataname: undefined,
        radarData: undefined
      },
      industryData: {
        industryCountList: undefined,
        industryLegendList: undefined
      },

      middleArry: undefined,
      mapBoolean: false,
      cityData: {
        code: undefined,
        name: undefined
      },
      stateTemp: {
        acceptNum: undefined,
        handleNum: undefined,
        registerNum: undefined,
        transferNum: undefined
      },
      verified: {
        nameList: ["属实", "基本属实", "部分属实", "不属实"],
        trueInfo: undefined
      },
      archiveList: undefined,
      filesMoreBoolean: false,
      loading: undefined,
      contentAllH: 0,
      tipContentH: 0,
      polluteContentH: 0,
      industryContentH: 0,
      centerH: 0,
      centerBoxH: 0,
      verifiedContentH: 0,
      filesContentH: 0,
      mapFlag: true
    };
  },
  created() {
    this.getBigBatchList();
  },
  mounted() {
    this.handleContentSetHeight();
  },
  methods: {
    async getBigBatchList() {
      const reponse = await bigBatchList({ superviseType: "R1" });
      const batchArry = reponse.data;
      this.batchArry = batchArry;
      this.batchId = batchArry[0].batchId;
      this.getBigMiddleData();
      this.handleMethods();
    },
    handleBatchClick(index) {
      module.destroyMap();
      this.isActive = index;
      const batchTemp = this.batchArry[index];
      this.batchId = batchTemp.batchId;
      this.getBigMiddleData();
      this.handleMethods();
      this.middleArry = [];
      this.$refs.middleMapRef.handleMapBack();
    },
    handleMethods() {
      const loading = this.$loading({
        lock: true,
        text: "正在加载",
        spinner: "el-icon-loading",
        background: "rgba(0, 0, 0, 0.1)"
      });
      this.getLeftChartData();
      this.getRightChartData();
      loading.close();
    },
    async getLeftChartData() {
      const reponse = await bigLeftChartData({
        cityCode: this.cityCode,
        batchId: this.batchId
      });
      const subject = reponse.data;
      for (const item in subject.tipTypeData) {
        const subjectTip = subject.tipTypeData[item];
        if (subjectTip.name == "来电") {
          this.tipTypeData.subjectTipPhone = subjectTip.value;
        } else {
          this.tipTypeData.subjectTipLetter = subjectTip.value;
        }
      }

      if (subject.pollutionTypeData) {
        const pollutionValueArry = [];
        const radarData = [];
        for (const pollutionItem in subject.pollutionTypeData) {
          const subjectPollution = subject.pollutionTypeData[pollutionItem];
          pollutionValueArry.push(subjectPollution.value);
        }
        const pollutionMax = Math.max.apply(null, pollutionValueArry);
        for (const pollutionItem in subject.pollutionTypeData) {
          const subjectPollution = subject.pollutionTypeData[pollutionItem];
          radarData.push({
            name: subjectPollution.name,
            max: pollutionMax
          });
        }
        this.pollutionData.pollutionValueArry = pollutionValueArry;
        this.pollutionData.radarData = radarData;
      } else {
        this.pollutionData.pollutionValueArry = [];
        this.pollutionData.radarData = [];
      }
      if (subject.industryCountList) {
        this.industryData.industryCountList = subject.industryCountList;
        let arr = subject.industryLegendList.map(element => {
          return element.substring(0, 2);
        });
        this.industryData.industryLegendList = arr;
      } else {
        this.industryData.industryCountList = [];
        this.industryData.industryLegendList = [];
      }

      this.$nextTick(() => {
        this.handleTipEchart();
        subject.pollutionTypeData && this.handlePolluteEchart();
        subject.industryCountList && this.handleIndustryEchart();
      });
    },
    async getBigMiddleData() {
      const reponse = await bigMiddleData({ batchId: this.batchId });
      console.log(reponse);
      this.middleArry = reponse.data;
      this.$nextTick(() => {
        module.initMap(this.middleArry, this.mapFlag);
      });
    },
    handleSmallMapClick(index) {
      this.mapIdArr = [];
      this.mapFlag = false;
      module.destroyMap();
      this.mapBoolean = true;
      const cityData = this.middleArry[index];
      this.cityData = cityData;
      this.cityCode = cityData.code;
      this.handleMethods();
      this.$nextTick(() => {
        this.$refs.middleMapRef.getMiddleDataPoint();
        this.$refs.middleMapRef.getMiddleDetailData();
        module.initMap(this.middleArry, this.mapFlag);
        var mapArr = module.mapArrBack();
        var pointLayer = module.pointLayerBack();
        module.getPointData(this.cityData, this.batchId, mapArr, pointLayer);
      });
    },
    handleBigMapClose() {
      this.mapFlag = true;
      module.destroyMap();
      module.initMap(this.middleArry, this.mapFlag);
      this.mapBoolean = false;
      this.cityCode = undefined;
      this.cityData = {
        code: undefined,
        name: undefined
      };
      this.handleMethods();
    },
    handleChangeWidth(index) {
      const len = this.middleArry.length;
      if (len == 3) {
        if (index == len - 1) {
          return "100%";
        }
      } else if (len == 5) {
        if (index == 0 || index == 1) {
          return "49%";
        } else {
          return "33%";
        }
      } else if (len == 6) {
        return "33%";
      } else if (len == 2) {
        return "100%";
      }
    },
    handleFilesItemClick(item) {
      const { id } = item;
      Bus.$emit("middleTask", id);
    },
    async getRightChartData() {
      const reponse = await bigRightChartData({
        cityCode: this.cityCode,
        batchId: this.batchId
      });
      const subject = reponse.data;
      const stateSubject = subject.stateInfo;
      this.stateTemp = {
        acceptNum: stateSubject.acceptNum,
        handleNum: stateSubject.handleNum,
        registerNum: stateSubject.registerNum,
        transferNum: stateSubject.transferNum
      };
      this.verified.trueInfo = subject.trueInfo;
      this.archiveList = subject.archiveList;
      const archiveList = [];
      for (const archiveItem in subject.archiveList) {
        const subjectArchive = subject.archiveList[archiveItem];
        const temp = {
          id: subjectArchive.id,
          archiveName: subjectArchive.archiveName,
          areaName: subjectArchive.areaName,
          archiveCode: subjectArchive.archiveCode,
          archiveTime: subjectArchive.updateDate,
          archImgSrc: undefined
        };
        imgShow("/center/file/downloadFile", subjectArchive.path).then(src => {
          temp.archImgSrc = src;
        });
        archiveList.push(temp);
      }
      this.archiveList = archiveList;
      this.$nextTick(() => {
        this.handleVerifiedEchart();
      });
    },
    handleMoreClick() {
      this.filesMoreBoolean = true;
      this.$nextTick(() => {
        this.$refs.burgFilesMoreRef.getBigFindArchive();
      });
    },
    handleDialogClose() {
      this.filesMoreBoolean = false;
    },
    handleTipEchart() {
      let myChart = this.$echarts.init(document.getElementById("tipEchart"));
      let option = {
        tooltip: {
          trigger: "item",
          formatter: "{a} <br/>{b} : {c} ({d}%)"
        },
        series: [
          {
            name: "举报类型",
            type: "pie",
            radius: ["30%", "60%"],
            center: ["30%", "45%"],
            roseType: "radius",
            label: {
              show: false
            },
            labelLine: {
              length: 1,
              length2: 20,
              smooth: true
            },
            data: [
              {
                value: this.tipTypeData.subjectTipPhone,
                name: "来电",
                itemStyle: {
                  color: "rgba(10,172,255,0.7)",
                  borderColor: "rgba(10,172,255,1)",
                  borderWidth: 3
                }
              },
              {
                value: this.tipTypeData.subjectTipLetter,
                name: "来信",
                itemStyle: {
                  color: "rgba(244,201,7,0.7)",
                  borderColor: "rgba(244,201,7,1)",
                  borderWidth: 3
                }
              }
            ]
          }
        ]
      };
      myChart.setOption(option, true);
    },

    handlePolluteEchart() {
      let myChart = this.$echarts.init(
        document.getElementById("polluteEchart")
      );
      let option = {
        tooltip: {
          trigger: "axis"
        },
        radar: {
          // shape: 'circle',
          indicator: this.pollutionData.radarData
        },
        series: [
          {
            name: "污染类型",
            type: "radar",
            tooltip: {
              trigger: "item"
            },
            data: [
              {
                value: this.pollutionData.pollutionValueArry
              }
            ]
          }
        ]
      };
      myChart.setOption(option, true);
    },
    handleIndustryEchart() {
      let myChart = this.$echarts.init(
        document.getElementById("industryEchart")
      );
      let option = {
        color: ["#3398DB"],
        tooltip: {
          trigger: "axis",
          axisPointer: {
            type: "line",
            lineStyle: {
              opacity: 0
            }
          },
          formatter: function(prams) {
            return prams[0].axisValueLabel + ":" + prams[0].data;
          }
        },
        grid: {
          left: "5%",
          right: "5%",
          bottom: "5%",
          top: "7%",
          height: "85%",
          containLabel: true,
          z: 22
        },
        xAxis: [
          {
            type: "category",
            gridIndex: 0,
            data: this.industryData.industryLegendList,
            axisTick: {
              alignWithLabel: true
            },
            axisLine: {
              lineStyle: {
                color: "#0c3b71"
              }
            },
            axisLabel: {
              show: true,
              color: "rgb(170,170,170)",
              fontSize: 10
            }
          }
        ],
        yAxis: [
          {
            type: "value",
            name: "单位:件",
            nameTextStyle: {
              color: "rgb(170,170,170)"
            },
            gridIndex: 0,
            splitLine: {
              show: false
            },
            axisTick: {
              show: false
            },
            axisLine: {
              lineStyle: {
                color: "#0c3b71"
              }
            },
            axisLabel: {
              color: "rgb(170,170,170)",
              formatter: "{value}"
            },
            minInterval: 1
          },
          {
            type: "value",
            gridIndex: 0,
            min: 0,
            max: 100,
            splitNumber: 12,
            splitLine: {
              show: false
            },
            axisLine: {
              show: false
            },
            axisTick: {
              show: false
            },
            axisLabel: {
              show: false
            },
            splitArea: {
              show: true,
              areaStyle: {
                color: ["rgba(250,250,250,0.0)", "rgba(250,250,250,0.05)"]
              }
            }
          }
        ],
        series: [
          {
            name: "数量",
            type: "bar",
            barWidth: "30%",
            xAxisIndex: 0,
            yAxisIndex: 0,
            itemStyle: {
              normal: {
                barBorderRadius: 30,
                color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [
                  {
                    offset: 0,
                    color: "#00feff"
                  },
                  {
                    offset: 0.5,
                    color: "#027eff"
                  },
                  {
                    offset: 1,
                    color: "#0286ff"
                  }
                ])
              }
            },
            data: this.industryData.industryCountList,
            zlevel: 11
          }
        ]
      };
      myChart.setOption(option, true);
    },
    handleVerifiedEchart() {
      let myChart = this.$echarts.init(
        document.getElementById("verifiedEchart")
      );
      let option = {
        color: ["#3398DB"],
        tooltip: {
          trigger: "axis",
          axisPointer: {
            type: "line",
            lineStyle: {
              opacity: 0
            }
          },
          formatter: function(prams) {
            return prams[0].axisValueLabel + ":" + prams[0].data;
          }
        },
        grid: {
          left: "5%",
          right: "5%",
          bottom: "5%",
          top: "30",
          height: "75%",
          containLabel: true,
          z: 22
        },
        xAxis: [
          {
            type: "category",
            gridIndex: 0,
            data: this.verified.nameList,
            axisTick: {
              alignWithLabel: true
            },
            axisLine: {
              lineStyle: {
                color: "#0c3b71"
              }
            },
            axisLabel: {
              show: true,
              color: "rgb(170,170,170)",
              fontSize: 10
            }
          }
        ],
        yAxis: [
          {
            type: "value",
            name: "单位:件",
            nameTextStyle: {
              color: "rgb(170,170,170)"
            },
            gridIndex: 0,
            splitLine: {
              show: false
            },
            axisTick: {
              show: false
            },
            axisLine: {
              lineStyle: {
                color: "#0c3b71"
              }
            },
            axisLabel: {
              color: "rgb(170,170,170)",
              formatter: "{value}"
            },
            minInterval: 1
          },
          {
            type: "value",
            gridIndex: 0,
            min: 0,
            max: 100,
            splitNumber: 12,
            splitLine: {
              show: false
            },
            axisLine: {
              show: false
            },
            axisTick: {
              show: false
            },
            axisLabel: {
              show: false
            },
            splitArea: {
              show: true,
              areaStyle: {
                color: ["rgba(250,250,250,0.0)", "rgba(250,250,250,0.05)"]
              }
            }
          }
        ],
        series: [
          {
            name: "数量",
            type: "bar",
            barWidth: "30%",
            xAxisIndex: 0,
            yAxisIndex: 0,
            itemStyle: {
              normal: {
                barBorderRadius: 30,
                color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [
                  {
                    offset: 0,
                    color: "#00feff"
                  },
                  {
                    offset: 0.5,
                    color: "#027eff"
                  },
                  {
                    offset: 1,
                    color: "#0286ff"
                  }
                ])
              }
            },
            data: this.verified.trueInfo,
            zlevel: 11
          }
        ]
      };
      myChart.setOption(option, true);
    },
    handleContentSetHeight() {
      const contentAllH = window.innerHeight - 90;
      this.contentAllH = contentAllH;
      const contentH = contentAllH - 30;
      const ctopTitleH = this.$refs.ctopTitle.offsetHeight;
      const tipCtopH = contentH * 0.31;
      this.tipContentH = tipCtopH - ctopTitleH;
      const polluteCtopH = contentH * 0.37;
      this.polluteContentH = polluteCtopH - ctopTitleH;
      const industryCtopH = contentH * 0.29;
      this.industryContentH = industryCtopH - ctopTitleH;

      const centerH = contentAllH - 20;
      this.centerH = centerH;

      const centerInnerH = centerH - 60;
      this.centerBoxH = centerInnerH * 0.49;

      const verifiedCtopH = contentH * 0.33;
      this.verifiedContentH = verifiedCtopH - ctopTitleH;
      const filesCtopH = contentH * 0.32;
      this.filesContentH = filesCtopH - ctopTitleH;
    }
  }
};
</script>

<style lang="scss" scoped>
.styem-content {
  width: 100%;
  padding: 0 1.7%;
  box-sizing: border-box;

  .styem-content-left {
    width: 20%;
    float: left;
  }
  .styem-content-center {
    float: left;
    border: 1px solid #135074;
    width: 58%;
    margin-left: 1%;
    margin-top: 10px;
    padding: 0 1%;
    position: relative;
    .styem-content-inner {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      position: relative;
      .map-box {
        margin-top: 10px;
        position: relative;
        width: 49.5%;
        height: 100%;
        background-color: rgba($color: #0f031e, $alpha: 0.2);
        cursor: pointer;
        .content-center-address {
          z-index: 99999;
        }
        .content-center-show {
          z-index: 99999;
        }
      }
    }
  }
  .styem-content-right {
    width: 20%;
    float: right;
  }
}
.styem-ctop {
  margin-top: 10px;
  border: 1px solid #135074;
  position: relative;
  padding: 0 3%;
  box-sizing: border-box;
  background-color: rgba($color: #0f031e, $alpha: 0.2);
  .ctop-border {
    width: 19px;
    height: 21px;
    display: block;
    position: absolute;
    &.ctop-left-top {
      left: -3px;
      top: -3px;
      background: url("~@/assets/images/ctop-left-top.png") no-repeat center
        center;
    }
    &.ctop-right-top {
      right: -3px;
      top: -3px;
      background: url("~@/assets/images/ctop-left-right.png") no-repeat center
        center;
    }
  }
}
.styem-ctop-title {
  font-size: 16px;
  color: #0feef2;
  font-weight: normal;
  font-family: Georgia, "Times New Roman", Times, serif;
  margin: 0;
  line-height: 36px;
}
.round-process {
  position: absolute;
  bottom: 0;
  left: 2%;
  width: 96%;
  height: 40px;
  display: flex;
  background-color: #0a4899;
  padding: 0 3%;
  .process-item {
    flex: 1;
    justify-content: center;
    flex-direction: column;
    cursor: pointer;
    &.active {
      .process-text {
        color: #3bfcff;
      }
      .process-line {
        .process-circle {
          background-color: #3bfcff;
        }
      }
    }
    .process-line {
      width: 100%;
      height: 6px;
      display: block;
      margin-top: 10px;
      background-color: #5a7fb0;
      position: relative;
      .process-circle {
        width: 16px;
        height: 16px;
        background-color: #d2d2d2;
        display: block;
        border-radius: 10px;
        position: absolute;
        left: 50%;
        top: -5px;
        margin-left: -8px;
      }
    }
    .process-text {
      display: block;
      font-size: 14px;
      color: #d2d2d2;
      margin-top: 5px;
      text-align: center;
    }
  }
}
.content-center-address {
  position: absolute;
  display: block;
  height: 23px;
  line-height: 23px;
  font-size: 16px;
  color: #0feef2;
  padding-left: 30px;
  font-family: Georgia, "Times New Roman", Times, serif;
  background: url("~@/assets/images/styem-address.png") no-repeat left center;
  left: 2%;
  top: 10px;
}
.content-center-show {
  position: absolute;
  right: 3%;
  top: 20px;
  width: 130px;
  height: 62px;
  background: url("~@/assets/images/styem-show-bg.png") no-repeat left center;
  background-size: 100% 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding-left: 5%;
  box-sizing: border-box;
  .show-text {
    font-size: 14px;
    color: #fff;
    display: block;
  }
  .show-number {
    font-size: 16px;
    color: #0feef2;
    display: block;
    margin-top: 12px;
  }
}
.files-more-btn {
  width: 62px;
  height: 24px;
  line-height: 24px;
  font-size: 14px;
  display: inline-block;
  border: 1px solid #35ffd2;
  border-radius: 20px;
  color: #35ffd2;
  text-align: center;
  cursor: pointer;
  float: right;
}
.files-box {
  overflow: hidden;
  width: 100%;
  .files-item {
    display: flex;
    align-items: center;
    margin-top: 10px;
    cursor: pointer;
    &:nth-child(2) {
      display: none;
    }
    .files-item-img {
      width: 24%;
    }
    .files-item-right {
      padding-left: 10px;
      .files-item-title {
        height: 38px;
        font-size: 14px;
        color: #fff;
        margin: 0;
        text-overflow: -o-ellipsis-lastline;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        line-clamp: 2;
        -webkit-box-orient: vertical;
      }
      .files-item-time {
        display: flex;
        margin: 0;
        justify-content: space-between;
        margin-top: 10px;
        align-items: center;
        i {
          display: block;
          font-size: 12px;
          color: #bac3c4;
          font-style: normal;
        }
      }
    }
  }
}
.tip-funnel {
  width: 100%;
  background: url("~@/assets/images/funnel-img.png") no-repeat center center;
  height: 90%;
  background-size: contain;
  margin: 0 auto;
  position: relative;
  .tip-funnel-item {
    width: 30%;
    position: absolute;
    background: url("~@/assets/images/funel-line.png") no-repeat center center;
    background-size: 100% 100%;
    i {
      display: inline-block;
      font-style: normal;
      margin-bottom: 6px;
      font-size: 12px;
    }
    &.funnel-item-one {
      color: #b7eb09;
      left: 17%;
      top: 14%;
    }
    &.funnel-item-two {
      color: #0bffb1;
      left: 11%;
      top: 40%;
    }
    &.funnel-item-three {
      color: #00d4ff;
      left: 7%;
      top: 62%;
    }
    &.funnel-item-four {
      color: #008ae2;
      left: 2%;
      top: 87%;
    }
  }
}
@media screen and (min-width: 1700px) {
  .content-center-show {
    right: 3%;
    top: 20px;
    width: 186px;
    height: 82px;
    padding-left: 6%;
    .show-text {
      font-size: 16px;
    }
    .show-number {
      font-size: 20px;
      margin-top: 12px;
    }
  }
  .files-more-btn {
    width: 72px;
    height: 30px;
    line-height: 30px;
    font-size: 16px;
  }
  .files-box {
    .files-item {
      margin-top: 10px;
      &:nth-child(2) {
        display: flex;
        border-top: 1px solid #677077;
        padding-top: 10px;
      }
      .files-item-img {
        width: 24%;
      }
      .files-item-right {
        padding-left: 10px;
        width: 76%;
        .files-item-title {
          font-size: 16px;
          height: 48px;
        }
        .files-item-time {
          margin-top: 10px;
          i {
            display: block;
            font-size: 14px;
          }
        }
      }
    }
  }
  .tip-funnel {
    .tip-funnel-item {
      i {
        font-size: 14px;
      }
    }
  }
}
</style>
